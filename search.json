[{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Basic_Map.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding_Basic_Map","text":"ggmapcn package provides various tools visualizing geographic data China beyond. vignette demonstrates basic advanced usage geom_mapcn() geom_world() plotting administrative boundaries combining geographic data.","code":""},{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Basic_Map.html","id":"example-1-basic-map-of-china","dir":"Articles","previous_headings":"","what":"Example 1: Basic Map of China","title":"Adding_Basic_Map","text":"plot map China province boundaries, use geom_mapcn() function. map uses Azimuthal Equal Distance projection default.","code":"ggplot() +   geom_mapcn() +   theme_minimal()"},{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Basic_Map.html","id":"example-2-adding-buffer-zones-and-coastlines","dir":"Articles","previous_headings":"","what":"Example 2: Adding Buffer Zones and Coastlines","title":"Adding_Basic_Map","text":"’s comprehensive example demonstrating plot province boundaries, buffer zones, coastlines map:","code":"ggplot() +   geom_buffer_cn(mainland_dist = 40000) +   geom_buffer_cn(mainland_dist = 20000, fill = \"#BBB3D8\") +   geom_mapcn(fill = \"white\") +   geom_boundary_cn() +   theme_bw() #> Warning: attribute variables are assumed to be spatially constant throughout #> all geometries #> Warning: attribute variables are assumed to be spatially constant throughout #> all geometries"},{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Basic_Map.html","id":"example-3-overlaying-china-on-a-world-map","dir":"Articles","previous_headings":"","what":"Example 3: Overlaying China on a World Map","title":"Adding_Basic_Map","text":"geom_world() function allows visualize global data, geom_mapcn() overlays China detailed analysis.","code":"# Define projections china_proj <- \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\"  # Combine world map as a background and China map as overlay ggplot() +   # World map as background   geom_world(fill = \"gray90\", color = \"gray70\", linewidth = 0.2) +   coord_proj(     crs = \"+proj=merc\",     xlim = c(-180, 180),     ylim = c(-90, 90)   ) +   # Overlay China map   geom_mapcn(     fill = \"lightblue\",     color = \"black\",     linewidth = 0.5   ) +   geom_boundary_cn(color = \"red\", linewidth = 0.6) +   theme_minimal() #> Coordinate system already present. #> ℹ Adding new coordinate system, which will replace the existing one. #> Warning: Duplicated aesthetics after name standardisation: colour and linewidth #> Duplicated aesthetics after name standardisation: colour and linewidth #> Duplicated aesthetics after name standardisation: colour and linewidth #> Duplicated aesthetics after name standardisation: colour and linewidth #> Duplicated aesthetics after name standardisation: colour and linewidth #> Duplicated aesthetics after name standardisation: colour and linewidth"},{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Basic_Map.html","id":"example-3-filtering-china-and-its-neighbors","dir":"Articles","previous_headings":"","what":"Example 3: Filtering China and Its Neighbors","title":"Adding_Basic_Map","text":"example demonstrates filtering China neighboring countries, highlighting China red.","code":"# Define neighboring countries china_neighbors <- c(\"CHN\", \"AFG\", \"BTN\", \"MMR\", \"LAO\", \"NPL\", \"PRK\", \"KOR\",                      \"KAZ\", \"KGZ\", \"MNG\", \"IND\", \"BGD\", \"TJK\", \"PAK\", \"LKA\", \"VNM\")  # Plot world map with filtered countries ggplot() +   geom_world(fill = \"gray90\", color = \"gray70\", linewidth = 0.2) +   geom_world(     filter = china_neighbors,     filter_attribute = \"SOC\",     fill = \"lightblue\",     color = \"black\",     linewidth = 0.5   ) +   geom_world(     filter = \"CHN\",     filter_attribute = \"SOC\",     fill = \"red\",     color = \"black\",     linewidth = 0.8   ) +   coord_proj(     crs = \"+proj=merc\",     xlim = c(60, 140),     ylim = c(-10, 60)   ) +   theme_minimal()"},{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Spatial_Data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding_Spatial_Data","text":"vignette introduces two functions ggmapcn package: geom_loc geom_vege_raster. functions extend capabilities package spatial data visualization.","code":""},{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Spatial_Data.html","id":"geom_loc-adding-spatial-point-data-layer-with-color-by-grouping","dir":"Articles","previous_headings":"","what":"geom_loc: Adding Spatial Point Data Layer with Color by Grouping","title":"Adding_Spatial_Data","text":"geom_loc function allows add spatial point data ggplot, supporting sf tabular data frames, color mapping based grouping variable.","code":"# Create a ggplot with spatial points colored by 'Category' set.seed(123) data_sim <- data.frame(    Longitude = runif(100, 80, 120),    Latitude = runif(100, 28, 40),    Category = sample(c(\"Type A\", \"Type B\", \"Type C\"), 100, replace = TRUE)    ) ggplot() +    geom_boundary_cn() +    geom_loc(      data = data_sim, lon = \"Longitude\", lat = \"Latitude\",      mapping = aes(color = Category), size = 1, alpha = 0.7    ) +    theme_bw()"},{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Spatial_Data.html","id":"basemap_vege-vegetation-map-of-china-layer-for-ggplot2","dir":"Articles","previous_headings":"","what":"basemap_vege: Vegetation Map of China Layer for ggplot2","title":"Adding_Spatial_Data","text":"using function, ensure necessary data files available running: basemap_vege function adds vegetation raster map China color-coded vegetation types ggplot.","code":"# This function checks if the required data files are available # It may take some time, especially if your network connection is slow.   check_geodata(files = c(\"vege_1km_projected.tif\"), quiet = FALSE) # Add vegetation raster of China to a ggplot ggplot() +   basemap_vege() +   guides(fill = guide_none()) +   theme_bw()"},{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Spatial_Data.html","id":"basemap_dem-elevation-map-of-china-layer-for-ggplot2","dir":"Articles","previous_headings":"","what":"basemap_dem: Elevation Map of China Layer for ggplot2","title":"Adding_Spatial_Data","text":"basemap_dem function adds digital elevation model (DEM) raster map China layer ggplot2.","code":"# Apply Azimuthal Equidistant projection centered on China ggplot() +   basemap_dem(crs = china_proj, within_china = TRUE) +   geom_boundary_cn(crs = china_proj) +   tidyterra::scale_fill_hypso_c(     palette = \"dem_print\",     breaks = c(0, 2000, 4000, 6000),     limits = c(0, 7000)   ) +   labs(fill = \"Elevation (m)\") +   theme_minimal() +   theme(legend.position = \"bottom\") #> <SpatRaster> resampled to 1000968 cells."},{"path":"https://rimagination.github.io/ggmapcn/articles/Adding_Spatial_Data.html","id":"coord_proj-transforming-limits-for-custom-projections","dir":"Articles","previous_headings":"","what":"coord_proj: Transforming Limits for Custom Projections","title":"Adding_Spatial_Data","text":"coord_proj function wrapper around coord_sf allows specify map limits (xlim, ylim) longitude latitude (WGS84 CRS) automatically transforms specified CRS accurate projections. , Azimuthal Equidistant projection centered China applied, transformed map limits specified longitude latitude.  Additionally, can focus map South China Sea Islands. longitude latitude range shown demonstration purposes .","code":"# World map with Azimuthal Equidistant projection centered on China ggplot() +   geom_world(fill = \"lightblue\") +   coord_proj(     crs = china_proj,     xlim = c(60, 140),     ylim = c(10, 50)   ) +   theme_minimal() ggplot() +   geom_boundary_cn() +   theme_bw() +   coord_proj(     crs = china_proj,     expand = FALSE,     xlim = c(105, 126),     ylim = c(2, 23)   )"},{"path":"https://rimagination.github.io/ggmapcn/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Liang Ren. Author, maintainer.","code":""},{"path":"https://rimagination.github.io/ggmapcn/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ren L (2025). ggmapcn: Customizable China Map Visualizations. R package version 0.2.0, https://rimagination.github.io/ggmapcn/.","code":"@Manual{,   title = {ggmapcn: Customizable China Map Visualizations},   author = {Liang Ren},   year = {2025},   note = {R package version 0.2.0},   url = {https://rimagination.github.io/ggmapcn/}, }"},{"path":"https://rimagination.github.io/ggmapcn/index.html","id":"ggmapcn","dir":"","previous_headings":"","what":"Customizable China Map Visualizations","title":"Customizable China Map Visualizations","text":"ggmapcn ggplot2 extension package visualizing China’s map customizable projections styling. package includes province-level map data supports adding mainland borders, coastlines, buffer areas, making easy create geographic visualizations China.","code":""},{"path":"https://rimagination.github.io/ggmapcn/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Customizable China Map Visualizations","text":"Install development version ggmapcn GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Rimagination/ggmapcn\", force = TRUE)"},{"path":[]},{"path":"https://rimagination.github.io/ggmapcn/index.html","id":"plotting-a-map-of-china","dir":"","previous_headings":"","what":"Plotting a Map of China","title":"Customizable China Map Visualizations","text":"plot map China province boundaries, use geom_mapcn():","code":"library(ggplot2) library(ggmapcn)  ggplot() +   geom_mapcn() +   theme_minimal()"},{"path":"https://rimagination.github.io/ggmapcn/index.html","id":"custom-projection-and-styling","dir":"","previous_headings":"","what":"Custom Projection and Styling","title":"Customizable China Map Visualizations","text":"want try Albers projection, can customize .","code":"ggplot() +   geom_mapcn(crs = \"+proj=aea +lat_1=25 +lat_2=47 +lat_0=0 +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\", color = \"black\", fill = \"white\", size = 0.7) +   theme_minimal()"},{"path":"https://rimagination.github.io/ggmapcn/index.html","id":"adding-mainland-borders-and-coastlines","dir":"","previous_headings":"","what":"Adding Mainland Borders and Coastlines","title":"Customizable China Map Visualizations","text":"Use geom_boundary_cn() add mainland borders coastlines map. can set colors line widths mainland coastline boundaries:","code":"ggplot() +   geom_mapcn(fill = NA) +   geom_boundary_cn(     mainland_color = \"black\",     mainland_size = 0.5,     coastline_color = \"skyblue\",     coastline_size = 0.5   ) +   theme_minimal()"},{"path":"https://rimagination.github.io/ggmapcn/index.html","id":"adding-buffer-zones","dir":"","previous_headings":"","what":"Adding Buffer Zones","title":"Customizable China Map Visualizations","text":"geom_buffer_cn() function adds buffer zones around China’s borders. can specify buffer distances, colors, projections. example shows buffer zones varying distances:","code":"ggplot() +   geom_buffer_cn(mainland_dist = 40000) +   geom_buffer_cn(mainland_dist = 20000, fill = \"#BBB3D8\") +   geom_mapcn(fill = \"white\") +   geom_boundary_cn() +   theme_minimal()"},{"path":"https://rimagination.github.io/ggmapcn/index.html","id":"data-source","dir":"","previous_headings":"","what":"Data Source","title":"Customizable China Map Visualizations","text":"data used package sourced Tianditu (https://cloudcenter.tianditu.gov.cn/administrativeDivision/), reliable provider province-, city-, county-level boundary information China. administrative division data processed GeoJSON format seamless integration package, enabling easy access visualization.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_compass.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Spatially-Aware Compass — annotation_compass","title":"Add a Spatially-Aware Compass — annotation_compass","text":"`annotation_compass()` adds compass (north arrow) `ggplot2` map. can aligned **grid north** (top plot) **true north** (geographic north). Styles can supplied grob function returning grob (e.g., `north_arrow_classic()`, `compass_sinan()`).","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_compass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Spatially-Aware Compass — annotation_compass","text":"","code":"annotation_compass(   mapping = NULL,   data = NULL,   ...,   location = \"bl\",   which_north = \"grid\",   height = grid::unit(1.5, \"cm\"),   width = grid::unit(1.5, \"cm\"),   pad_x = grid::unit(0.5, \"cm\"),   pad_y = grid::unit(0.5, \"cm\"),   rotation = NULL,   style = north_arrow_classic() )"},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_compass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Spatially-Aware Compass — annotation_compass","text":"mapping, data Standard ggplot2 arguments (typically unused). ... Additional parameters passed layer (rarely needed). location Character. One `\"tl\"`, `\"tr\"`, `\"bl\"`, `\"br\"` indicating top/bottom + left/right placement. Default: `\"bl\"`. which_north Character. `\"grid\"` (default) `\"true\"`. height, width `grid::unit`. Compass box dimensions. Defaults: `1.5 cm`. pad_x, pad_y `grid::unit`. Padding panel edges. Defaults: `0.5 cm`. rotation Numeric. Fixed rotation degrees (counter-clockwise). provided, overrides `\"grid\"`/`\"true\"` logic. style grob, `gList`/`gTree`, function returning grob (e.g., `north_arrow_classic()`). Default: `north_arrow_classic()`.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_compass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Spatially-Aware Compass — annotation_compass","text":"`ggplot2` layer object.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_compass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a Spatially-Aware Compass — annotation_compass","text":"* `\"grid\"` north: compass points straight plotting space (CRS needed). * `\"true\"` north: compass rotates toward geographic North Pole using plot CRS.   requires valid CRS available via `coord_sf()` injected setting   `layer$geom_params$crs`. * can override auto-rotation providing `rotation` (degrees CCW). * layer annotation-like: draws per panel using panel bounds.","code":""},{"path":[]},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_compass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Spatially-Aware Compass — annotation_compass","text":"","code":"nc <- sf::st_read(system.file(\"shape/nc.shp\", package=\"sf\"), quiet = TRUE)  base <- ggplot2::ggplot() +   ggplot2::geom_sf(data = nc, fill = \"grey90\") +   ggplot2::theme_minimal()  # Example 1: Grid north (no CRS required), bottom-left base + annotation_compass()   # Example 2: Custom style & position (top-left) base + annotation_compass(location = \"tl\", style = compass_sinan())   # Example 3: True north (requires a CRS) base +   ggplot2::coord_sf(crs = \"+proj=lcc +lon_0=-100 +lat_1=33 +lat_2=45\") +   annotation_compass(which_north = \"true\")"},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_scalebar.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Spatially-Aware Scale Bar — annotation_scalebar","title":"Add a Spatially-Aware Scale Bar — annotation_scalebar","text":"`annotation_scalebar()` adds projection-aware scale bar `ggplot2` map. detects map's CRS chooses readable width units automatically. Robust fallbacks prevent \"zero-length unit\" errors allow scale bar render even CRS information limited. Supported styles: - `\"segment\"` (minimal horizontal bar ticks labels) - `\"ticks\"` (baseline + vertical ticks) - `\"bar\"` (alternating black/white blocks)","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_scalebar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Spatially-Aware Scale Bar — annotation_scalebar","text":"","code":"annotation_scalebar(   mapping = NULL,   data = NULL,   ...,   location = \"bl\",   style = \"segment\",   fixed_width = NULL,   crs_unit = NULL,   crs = NULL,   display_unit = NULL,   unit_labels = NULL,   width_hint = 0.25,   unit_category = \"metric\",   bar_cols = c(\"black\", \"white\"),   line_width = 1,   height = grid::unit(0.25, \"cm\"),   pad_x = grid::unit(0.25, \"cm\"),   pad_y = grid::unit(0.25, \"cm\"),   text_pad = grid::unit(0.15, \"cm\"),   text_cex = 0.7,   text_face = NULL,   text_family = \"\",   tick_height = 0.6,   segments = NULL,   label_show = \"ends\",   minor_tick_height = 0.5,   geographic_mode = c(\"approx_m\", \"degrees\"),   text_col = \"black\",   line_col = \"black\" )  GeomScaleBar"},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_scalebar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Add a Spatially-Aware Scale Bar — annotation_scalebar","text":"object class GeomScaleBar (inherits Geom, ggproto, gg) length 5.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_scalebar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Spatially-Aware Scale Bar — annotation_scalebar","text":"mapping, data Standard ggplot2 layer arguments (typically unused). ... Additional parameters passed layer (rarely needed). location Character. One `\"bl\"`, `\"br\"`, `\"tr\"`, `\"tl\"`. Placement relative panel edges. Default: `\"bl\"`. style Character. Scale bar style: `\"segment\"` (default), `\"bar\"`, `\"ticks\"`. fixed_width Numeric. Force bar width *native CRS units* (e.g., meters). Overrides automatic width selection. crs_unit Character. Units CRS (e.g., `\"m\"`, `\"ft\"`, `\"°\"`). Usually auto-detected; set auto-detection possible. crs `sf::st_crs` object proj string. Fallback CRS plot provide one (e.g., using `coord_sf()`). display_unit Character. Force display units (e.g., `\"m\"`, `\"km\"`). Ignored `geographic_mode = \"degrees\"`. unit_labels Named character vector i18n, e.g., `c(km = \"Kilometers\", m = \"Meters\", \"°\" = \"°\")`. width_hint Numeric (0, 1]. Target fraction panel width used bar. Default: `0.25`. unit_category Character: `\"metric\"` (default) `\"imperial\"`. Affects auto-promotion (m→km, ft→mi). bar_cols Character(2). Colors `\"bar\"` style alternating blocks. Default: `c(\"black\", \"white\")`. line_width Numeric. Line thickness outlines/ticks. Default: `1`. height `grid::unit`. Bar height. Default: `unit(0.25, \"cm\")`. pad_x, pad_y `grid::unit`. Padding panel edges. Default: `0.25 cm`. text_pad `grid::unit`. Gap bar labels. Default: `0.15 cm`. text_cex, text_face, text_family Font settings labels. Defaults: `0.7`, `NULL`, `\"\"`. tick_height Numeric [0,1]. Relative height interior ticks `\"ticks\"` style. Default: `0.6`. segments Integer. `\"segment\"` style, number major divisions; `NULL`, automatic, readable choice used. label_show ticks get labels: `\"ends\"` (default), `\"\"`, `\"major\"`, numeric frequency (e.g., `2`), numeric vector indices (1-based). minor_tick_height Numeric [0,1]. `\"segment\"` style, minor ticks’ relative height. Default: `0`. geographic_mode Character. **geographic CRS** : - `\"approx_m\"`: approximate meters/kilometers (default; warns approximation) - `\"degrees\"`: display degrees directly (metric conversion) text_col, line_col Colors labels outlines/ticks. Defaults: `\"black\"`, `\"black\"`.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_scalebar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Spatially-Aware Scale Bar — annotation_scalebar","text":"`ggplot2` layer object representing scale bar.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_scalebar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a Spatially-Aware Scale Bar — annotation_scalebar","text":"* **projected CRS** use (e.g., UTM/AEQD meters), scale bar   accurate native units. * **geographic CRS** (EPSG:4326, degrees) use, distances vary   latitude. `geographic_mode` parameter controls display scale:   - `\"approx_m\"` (default): approximate meters/kilometers using great-circle     distance panel's center latitude. warning issued.   - `\"degrees\"`: display raw degree units (e.g., `1°`) without converting meters. * can also override width `fixed_width` (native CRS units).","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_scalebar.html","id":"dependencies","dir":"Reference","previous_headings":"","what":"Dependencies","title":"Add a Spatially-Aware Scale Bar — annotation_scalebar","text":"Requires **ggplot2**, **sf**, **grid**.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/annotation_scalebar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Spatially-Aware Scale Bar — annotation_scalebar","text":"","code":"nc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"), quiet = TRUE)  base_plot <- ggplot2::ggplot() +   ggplot2::geom_sf(data = nc, fill = \"grey90\") +   ggplot2::theme_minimal()  # Example 1: Projected CRS (accurate, auto-sized) base_plot + ggplot2::coord_sf(crs = 32617) +   annotation_scalebar(location = \"bl\")   # Example 2: Ticks style, top-right base_plot + ggplot2::coord_sf(crs = 32617) +   annotation_scalebar(location = \"tr\", style = \"ticks\")   # Example 3: Geographic CRS (EPSG:4326), approximate meters (warns) base_plot + ggplot2::coord_sf(crs = 4326) +   annotation_scalebar(location = \"bl\", geographic_mode = \"approx_m\") #> Warning: Scale bar is approximate in geographic CRS (degrees). Distances vary with latitude. For accuracy, use a projected CRS, or set `geographic_mode = \"degrees\"`.   # Example 4: Geographic CRS, display in degrees base_plot + ggplot2::coord_sf(crs = 4326) +   annotation_scalebar(location = \"bl\", geographic_mode = \"degrees\")   # Example 5: Force a 100 km bar (projected CRS) base_plot + ggplot2::coord_sf(crs = 32617) +   annotation_scalebar(location = \"bl\", fixed_width = 100000, display_unit = \"km\")"},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Elevation Map of China Layer for ggplot2 — basemap_dem","title":"Elevation Map of China Layer for ggplot2 — basemap_dem","text":"`basemap_dem` adds digital elevation model (DEM) raster map China layer ggplot2. function ensures output map remains rectangular, regardless chosen projection. supports displaying DEM either within China's boundary larger rectangular area around China. Users can provide DEM data using `data` parameter, default built-DEM data used.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elevation Map of China Layer for ggplot2 — basemap_dem","text":"","code":"basemap_dem(   data = NULL,   crs = NULL,   within_china = FALSE,   maxcell = 1e+06,   na.rm = FALSE,   ... )"},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_dem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Elevation Map of China Layer for ggplot2 — basemap_dem","text":"data Optional. `terra` raster object custom DEM data. crs Coordinate reference system (CRS) projection. Defaults CRS DEM data. Users can specify CRS strings (e.g., `\"EPSG:4326\"` custom projections). within_china Logical. `TRUE`, displays DEM within China's boundary. `FALSE`, displays DEM larger rectangular area around China. Default `FALSE`. maxcell Maximum number cells rendering (improve performance). Defaults `1e6`. na.rm Logical. `TRUE`, removes missing values. Default `FALSE`. ... Additional parameters passed `geom_spatraster`.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_dem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Elevation Map of China Layer for ggplot2 — basemap_dem","text":"`ggplot` object containing elevation map China layer, can customized plotted.","code":""},{"path":[]},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_dem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elevation Map of China Layer for ggplot2 — basemap_dem","text":"","code":"# \\donttest{ # Before using the basemap_dem function, make sure the required data files are available. # The required files are: \"gebco_2024_China.tif\" and \"China_mask.gpkg\". # You can use check_geodata() to download them from GitHub if they are not available locally.  # Check and download the required data files if they are missing check_geodata(files = c(\"gebco_2024_China.tif\", \"China_mask.gpkg\")) #> extdata dir: /home/runner/work/_temp/Library/ggmapcn/extdata (writable = TRUE) #> cache   dir: /home/runner/.local/share/R/ggmapcn (writable = TRUE) #> Fetching gebco_2024_China.tif into: /home/runner/work/_temp/Library/ggmapcn/extdata #> URL: https://cdn.jsdelivr.net/gh/Rimagination/ggmapcn-data@main/data/gebco_2024_China.tif #>  #> Warning: Attempt 1 failed: HTTP response code said error [cdn.jsdelivr.net]: #> The requested URL returned error: 403 #>  #> Warning: Attempt 2 failed: HTTP response code said error [cdn.jsdelivr.net]: #> The requested URL returned error: 403 #>  #> Warning: Attempt 3 failed: HTTP response code said error [cdn.jsdelivr.net]: #> The requested URL returned error: 403 #>  #> URL: https://raw.githubusercontent.com/Rimagination/ggmapcn-data/main/data/gebco_2024_China.tif #>  #> Saved to extdata: /home/runner/work/_temp/Library/ggmapcn/extdata/gebco_2024_China.tif #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/China_mask.gpkg #> [1] \"/home/runner/work/_temp/Library/ggmapcn/extdata/gebco_2024_China.tif\" #> [2] \"/home/runner/work/_temp/Library/ggmapcn/extdata/China_mask.gpkg\"       # Define the CRS for China (EPSG:4326 is a common global geographic coordinate system) china_proj <- \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\"  # Example 1: Display full rectangular area around China using built-in DEM data ggplot() +   basemap_dem(within_china = FALSE) +   tidyterra::scale_fill_hypso_tint_c(     palette = \"gmt_globe\",     breaks = c(-10000, -5000, 0, 2000, 5000, 8000)   ) +   theme_minimal() #> <SpatRaster> resampled to 1001520 cells.   # Example 2: Display only China's DEM and boundaries using built-in DEM data ggplot() +   basemap_dem(crs = china_proj, within_china = TRUE) +   geom_boundary_cn(crs = china_proj) +   tidyterra::scale_fill_hypso_c(     palette = \"dem_print\",     breaks = c(0, 2000, 4000, 6000),     limits = c(0, 7000)   ) +   labs(fill = \"Elevation (m)\") +   theme_minimal() #> <SpatRaster> resampled to 1000968 cells.  # }"},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_vege.html","id":null,"dir":"Reference","previous_headings":"","what":"Vegetation Map of China Layer for ggplot2 — basemap_vege","title":"Vegetation Map of China Layer for ggplot2 — basemap_vege","text":"Adds vegetation raster map China ggplot2 plot, color-coded vegetation types.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_vege.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vegetation Map of China Layer for ggplot2 — basemap_vege","text":"","code":"basemap_vege(   color_table = NULL,   crs = NULL,   maxcell = 1e+06,   use_coltab = TRUE,   na.rm = FALSE,   ... )"},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_vege.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vegetation Map of China Layer for ggplot2 — basemap_vege","text":"color_table data frame containing vegetation types corresponding colors. columns \"code\" (raster values), \"type\" (vegetation names), \"col\" (hex color codes). NULL, default color table based standard vegetation classifications China used. crs character string specifying coordinate reference system projection. NULL, default projection \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\" applied. maxcell integer indicating maximum number cells rendering improve performance. Defaults 1e6. use_coltab logical value indicating whether use color table raster values. Default TRUE. na.rm logical value indicating whether remove missing values. Default FALSE. ... Additional parameters passed `geom_spatraster`.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_vege.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vegetation Map of China Layer for ggplot2 — basemap_vege","text":"ggplot2 layer object representing vegetation map China.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_vege.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vegetation Map of China Layer for ggplot2 — basemap_vege","text":"Zhang X, Sun S, Yong S, et al. (2007). *Vegetation map People's Republic China (1:1000000)*. Geology Publishing House, Beijing.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/basemap_vege.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vegetation Map of China Layer for ggplot2 — basemap_vege","text":"","code":"# \\donttest{ # Example1: Check and load the vegetation raster map  # Make sure the required raster data is available check_geodata(files = c(\"vege_1km_projected.tif\")) #> extdata dir: /home/runner/work/_temp/Library/ggmapcn/extdata (writable = TRUE) #> cache   dir: /home/runner/.local/share/R/ggmapcn (writable = TRUE) #> Fetching vege_1km_projected.tif into: /home/runner/work/_temp/Library/ggmapcn/extdata #> URL: https://cdn.jsdelivr.net/gh/Rimagination/ggmapcn-data@main/data/vege_1km_projected.tif #>  #> Saved to extdata: /home/runner/work/_temp/Library/ggmapcn/extdata/vege_1km_projected.tif #> [1] \"/home/runner/work/_temp/Library/ggmapcn/extdata/vege_1km_projected.tif\"  # Once the data is checked or downloaded, add the vegetation raster to a ggplot ggplot() +   basemap_vege() +   theme_minimal() #> <SpatRaster> resampled to 1000776 cells. #> Warning: Removed 715308 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # Example2: Customize color table custom_colors <- data.frame(   code = 0:11,   type = c(     \"Non-vegetated\", \"Needleleaf forest\", \"Needleleaf and broadleaf mixed forest\",     \"Broadleaf forest\", \"Scrub\", \"Desert\", \"Steppe\", \"Grassland\",     \"Meadow\", \"Swamp\", \"Alpine vegetation\", \"Cultivated vegetation\"   ),   col = c(     \"#8D99B3\", \"#97B555\", \"#34BF36\", \"#9ACE30\", \"#2EC6C9\", \"#E5CE0E\",     \"#5BB1ED\", \"#6494EF\", \"#7AB9CB\", \"#D97A80\", \"#B87701\", \"#FEB780\"   ) ) ggplot() +   basemap_vege(color_table = custom_colors) +   labs(fill = \"Vegetation type group\") +   theme_minimal() #> <SpatRaster> resampled to 1000776 cells. #> Warning: Removed 715308 rows containing missing values or values outside the scale range #> (`geom_raster()`).  # }"},{"path":"https://rimagination.github.io/ggmapcn/reference/check_geodata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Download Geospatial Data — check_geodata","title":"Check and Download Geospatial Data — check_geodata","text":"Ensure required geodata files exist locally. function searches reuses existing files (overwrite = FALSE) attempting network download, following order: user-provided local_dirs installed package extdata (even writable) per-user cache tools::R_user_dir(\"ggmapcn\",\"data\") valid local file found (overwrite = TRUE), function downloads mirrors order. default, China-friendly CDN (jsDelivr) tried first, GitHub raw. Robust features: multiple mirrors, atomic writes, resume, timeouts, retries, safe checksum checks, correct curl progress callback.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/check_geodata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Download Geospatial Data — check_geodata","text":"","code":"check_geodata(   files = NULL,   overwrite = FALSE,   quiet = FALSE,   max_retries = 3,   mirrors = NULL,   use_checksum = TRUE,   checksums = NULL,   resume = TRUE,   local_dirs = NULL )"},{"path":"https://rimagination.github.io/ggmapcn/reference/check_geodata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Download Geospatial Data — check_geodata","text":"files Character vector file names. `NULL`, known files used. overwrite Logical. Force re-download even non-empty file exists. Default `FALSE`. quiet Logical. Suppress progress messages. Default `FALSE`. max_retries Integer. Max retry attempts per (mirror, file). Default `3`. mirrors Character vector base URLs (end `/`). Tried order. Default: jsDelivr first, GitHub raw. use_checksum Logical. Verify SHA-256 available. Default `TRUE`. checksums Named character vector SHA-256 digests (names = file names). `NULL`, built-defaults used known files; unknown files skip verification. resume Logical. Try HTTP range resume `.part` exists (writable dirs). Default `TRUE`. local_dirs Character vector directories search download. matching non-empty file found overwrite = FALSE, returned immediately.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/check_geodata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Download Geospatial Data — check_geodata","text":"Character vector absolute file paths (NA failures).","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/check_geodata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and Download Geospatial Data — check_geodata","text":"","code":"# \\donttest{ # Basic: ensure default files exist check_geodata() #> extdata dir: /home/runner/work/_temp/Library/ggmapcn/extdata (writable = TRUE) #> cache   dir: /home/runner/.local/share/R/ggmapcn (writable = TRUE) #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/China_sheng.rda #> Fetching China_shi.rda into: /home/runner/work/_temp/Library/ggmapcn/extdata #> URL: https://cdn.jsdelivr.net/gh/Rimagination/ggmapcn-data@main/data/China_shi.rda #>  #> Saved to extdata: /home/runner/work/_temp/Library/ggmapcn/extdata/China_shi.rda #> Fetching China_xian.rda into: /home/runner/work/_temp/Library/ggmapcn/extdata #> URL: https://cdn.jsdelivr.net/gh/Rimagination/ggmapcn-data@main/data/China_xian.rda #>  #> Saved to extdata: /home/runner/work/_temp/Library/ggmapcn/extdata/China_xian.rda #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/buffer_line.rda #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/China_mask.gpkg #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/world.rda #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/gebco_2024_China.tif #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/vege_1km_projected.tif #> [1] \"/home/runner/work/_temp/Library/ggmapcn/extdata/China_sheng.rda\"        #> [2] \"/home/runner/work/_temp/Library/ggmapcn/extdata/China_shi.rda\"          #> [3] \"/home/runner/work/_temp/Library/ggmapcn/extdata/China_xian.rda\"         #> [4] \"/home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda\"           #> [5] \"/home/runner/work/_temp/Library/ggmapcn/extdata/buffer_line.rda\"        #> [6] \"/home/runner/work/_temp/Library/ggmapcn/extdata/China_mask.gpkg\"        #> [7] \"/home/runner/work/_temp/Library/ggmapcn/extdata/world.rda\"              #> [8] \"/home/runner/work/_temp/Library/ggmapcn/extdata/gebco_2024_China.tif\"   #> [9] \"/home/runner/work/_temp/Library/ggmapcn/extdata/vege_1km_projected.tif\"  # Single file: reuse existing file if present (default overwrite = FALSE) check_geodata(files = \"boundary.rda\") #> extdata dir: /home/runner/work/_temp/Library/ggmapcn/extdata (writable = TRUE) #> cache   dir: /home/runner/.local/share/R/ggmapcn (writable = TRUE) #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda #> [1] \"/home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda\"  # Force re-download a file (e.g., suspected corruption) check_geodata(files = \"boundary.rda\", overwrite = TRUE) #> extdata dir: /home/runner/work/_temp/Library/ggmapcn/extdata (writable = TRUE) #> cache   dir: /home/runner/.local/share/R/ggmapcn (writable = TRUE) #> Fetching boundary.rda into: /home/runner/work/_temp/Library/ggmapcn/extdata #> URL: https://cdn.jsdelivr.net/gh/Rimagination/ggmapcn-data@main/data/boundary.rda #>  #> Saved to extdata: /home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda #> [1] \"/home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda\"  # Search local folders first; skip download if a valid file is found there check_geodata(   files = c(\"boundary.rda\", \"world.rda\"),   local_dirs = c(getwd())  # add more directories if needed ) #> extdata dir: /home/runner/work/_temp/Library/ggmapcn/extdata (writable = TRUE) #> cache   dir: /home/runner/.local/share/R/ggmapcn (writable = TRUE) #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/world.rda #> [1] \"/home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda\" #> [2] \"/home/runner/work/_temp/Library/ggmapcn/extdata/world.rda\"     # Provide your own mirror order (first tried wins) check_geodata(   files = \"boundary.rda\",   mirrors = c(     \"https://cdn.jsdelivr.net/gh/Rimagination/ggmapcn-data@main/data/\",     \"https://raw.githubusercontent.com/Rimagination/ggmapcn-data/main/data/\"   ) ) #> extdata dir: /home/runner/work/_temp/Library/ggmapcn/extdata (writable = TRUE) #> cache   dir: /home/runner/.local/share/R/ggmapcn (writable = TRUE) #> Using existing extdata file: /home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda #> [1] \"/home/runner/work/_temp/Library/ggmapcn/extdata/boundary.rda\" # }"},{"path":"https://rimagination.github.io/ggmapcn/reference/compass-styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Compass and North Arrow Styles — compass-styles","title":"Compass and North Arrow Styles — compass-styles","text":"collection style constructors return `grid` grobs use `annotation_compass(style = ...)`. styles provide different visual appearances compass north arrow drawn annotation.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/compass-styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compass and North Arrow Styles — compass-styles","text":"","code":"north_arrow_classic(   fill = c(\"white\", \"black\"),   line_col = \"black\",   line_width = 2,   text_col = \"black\",   text_size = 12,   text_face = \"plain\",   text_family = \"\" )  north_arrow_solid(   fill = \"black\",   line_col = \"black\",   line_width = 1,   text_col = \"black\",   text_size = 12,   text_face = \"plain\",   text_family = \"\" )  compass_rose_simple(   fill = c(\"white\", \"black\"),   line_col = \"black\",   line_width = 1,   sharpness = 0.7,   text_col = \"black\",   text_size = 12,   text_face = \"plain\",   text_family = \"\" )  compass_rose_classic(   fill = c(\"white\", \"black\"),   line_col = \"black\",   line_width = 1.5,   sharpness = 0.6,   text_col = \"black\",   text_size = 12,   text_face = \"plain\",   text_family = \"\" )  compass_rose_circle(   fill = \"white\",   line_col = \"black\",   line_width = 3,   text_col = \"black\",   text_size = 12,   text_face = \"plain\",   text_family = \"\" )  compass_guiding_fish(   size = 1,   ring_ratio = 0.2,   ring_width = 2,   n_seg = 16,   fish_col = \"black\",   fish_shift = -0.03,   text_col = \"black\",   text_size = 12,   text_face = \"plain\",   text_family = \"\" )  compass_sinan(   line_col = \"black\",   square_pad = 0.1,   ring_outer = 0.35,   ring_ratio = 0.65,   labels = c(\"N\", \"E\", \"S\", \"W\"),   text_size = 12,   text_face = \"plain\",   text_family = \"\",   text_col = \"black\",   label_offset = 0.05,   spoon_fill = \"black\",   spoon_col = \"black\",   spoon_scale = 0.8,   inner_fill = \"lightgrey\",   square_width = 2,   outer_width = 2,   inner_width = 1,   spoon_width = 1 )"},{"path":"https://rimagination.github.io/ggmapcn/reference/compass-styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compass and North Arrow Styles — compass-styles","text":"`grid` graphical object (grob).","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/compass-styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compass and North Arrow Styles — compass-styles","text":"Exported constructors documented topic: north_arrow_classic() north_arrow_solid() compass_rose_simple() compass_rose_classic() compass_rose_circle() compass_guiding_fish() compass_sinan() constructor returns grob ready passed annotation_compass(style = ...). arguments visual parameters (colors, line widths, label styles). styles include \"N\" label (cardinal labels) default indicate north.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/compass-styles.html","id":"common-parameters-used-selectively-by-constructors-","dir":"Reference","previous_headings":"","what":"Common parameters (used selectively by constructors)","title":"Compass and North Arrow Styles — compass-styles","text":"fill Fill color(s) polygons. Vectorized alternating fills styles. line_col Stroke color outlines. line_width Stroke width outlines (numeric). text_col Text color labels. text_size Text font size labels (points). text_face Text font face (e.g., \"plain\", \"bold\"). text_family Text font family. labels Character vector cardinal labels, usually c(\"N\",\"E\",\"S\",\"W\"). sharpness Controls star-point sharpness rose styles, numeric [0, 1]. size Global size scaler (used styles). ring_ratio Inner/outer radius ratio ringed styles (0 < value < 1). ring_width Stroke width ring outlines (numeric). n_seg Number ring segments (integer). fish_col Fill color fish shape (guiding fish style). fish_shift Vertical shift fish shape (guiding fish style). square_pad Padding around outer square (Sinan style), fraction box side. ring_outer Outer ring radius (Sinan style), expressed npc units (0..1). label_offset Label offset square edges (Sinan style), npc units. spoon_fill Fill color spoon glyph (Sinan style). spoon_col Stroke color spoon glyph (Sinan style). spoon_scale Scale factor spoon glyph (Sinan style). inner_fill Fill color inner disk (Sinan style). square_width,outer_width,inner_width,spoon_width Stroke widths respective     elements Sinan style.","code":""},{"path":[]},{"path":"https://rimagination.github.io/ggmapcn/reference/compass-styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compass and North Arrow Styles — compass-styles","text":"","code":"# Draw each style standalone with grid grid::grid.newpage(); grid::grid.draw(north_arrow_classic())  grid::grid.newpage(); grid::grid.draw(north_arrow_solid())  grid::grid.newpage(); grid::grid.draw(compass_rose_simple())  grid::grid.newpage(); grid::grid.draw(compass_rose_classic())  grid::grid.newpage(); grid::grid.draw(compass_rose_circle())  grid::grid.newpage(); grid::grid.draw(compass_guiding_fish())  grid::grid.newpage(); grid::grid.draw(compass_sinan())   # Use in ggplot (requires ggplot2 and sf) # \\donttest{ if (requireNamespace(\"ggplot2\", quietly = TRUE) &&     requireNamespace(\"sf\", quietly = TRUE)) {   nc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"), quiet = TRUE)   p <- ggplot2::ggplot() +     ggplot2::geom_sf(data = nc, fill = \"grey90\") +     ggplot2::theme_minimal()    # Classic arrow in top-right   p + annotation_compass(location = \"tr\", style = north_arrow_classic())    # Sinan style in bottom-left   p + annotation_compass(location = \"bl\", style = compass_sinan()) }  # }"},{"path":"https://rimagination.github.io/ggmapcn/reference/compass_sinan.html","id":null,"dir":"Reference","previous_headings":"","what":"Sinan (Ancient Chinese Compass) Style (Simplified) — compass_sinan","title":"Sinan (Ancient Chinese Compass) Style (Simplified) — compass_sinan","text":"Sinan (Ancient Chinese Compass) Style (Simplified)","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/compass_sinan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sinan (Ancient Chinese Compass) Style (Simplified) — compass_sinan","text":"","code":"compass_sinan(   line_col = \"black\",   square_pad = 0.1,   ring_outer = 0.35,   ring_ratio = 0.65,   labels = c(\"N\", \"E\", \"S\", \"W\"),   text_size = 12,   text_face = \"plain\",   text_family = \"\",   text_col = \"black\",   label_offset = 0.05,   spoon_fill = \"black\",   spoon_col = \"black\",   spoon_scale = 0.8,   inner_fill = \"lightgrey\",   square_width = 2,   outer_width = 2,   inner_width = 1,   spoon_width = 1 )"},{"path":"https://rimagination.github.io/ggmapcn/reference/compass_sinan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sinan (Ancient Chinese Compass) Style (Simplified) — compass_sinan","text":"grob representing simplified \"Sinan\"-inspired compass.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/coord_proj.html","id":null,"dir":"Reference","previous_headings":"","what":"Coordinate System with Transformed Limits for Custom Projections — coord_proj","title":"Coordinate System with Transformed Limits for Custom Projections — coord_proj","text":"`coord_proj` wrapper around ggplot2::coord_sf(). simplifies specifying map limits (`xlim`, `ylim`) longitude latitude (WGS84 CRS) automatically transforms specified CRS accurate projections. function extends functionality coord_sf() seamlessly handle user-specified geographic boundaries projection, ensuring accurate mapping.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/coord_proj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinate System with Transformed Limits for Custom Projections — coord_proj","text":"","code":"coord_proj(   crs = NULL,   xlim = NULL,   ylim = NULL,   expand = TRUE,   default_crs = \"EPSG:4326\",   ... )"},{"path":"https://rimagination.github.io/ggmapcn/reference/coord_proj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinate System with Transformed Limits for Custom Projections — coord_proj","text":"crs character string specifying coordinate reference system (CRS) projection (e.g., `\"EPSG:4326\"` custom projections like `\"+proj=merc\"`). xlim Longitude range (degrees) display, numeric vector length 2. ylim Latitude range (degrees) display, numeric vector length 2. expand Logical, whether expand plot limits. Default `TRUE`. default_crs character string specifying CRS input `xlim` `ylim`. Default `\"EPSG:4326\"`. ... Additional arguments passed ggplot2::coord_sf().","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/coord_proj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coordinate System with Transformed Limits for Custom Projections — coord_proj","text":"ggplot2 coord_sf object transformed limits.","code":""},{"path":[]},{"path":"https://rimagination.github.io/ggmapcn/reference/coord_proj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coordinate System with Transformed Limits for Custom Projections — coord_proj","text":"","code":"# World map with default projection and limits ggplot() +   geom_world() +   coord_proj(     crs = \"+proj=longlat +datum=WGS84\",     xlim = c(-180, 180),     ylim = c(-90, 90),     expand=FALSE   ) +   theme_minimal()   # Focused view with Azimuthal Equidistant projection china_proj <- \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\" ggplot() +   geom_world(fill = \"lightblue\") +   coord_proj(     crs = china_proj,     xlim = c(60, 140),     ylim = c(-10, 50)   ) +   theme_minimal()   # Display a small map of the South China Sea Islands with a custom projection ggplot() +   geom_boundary_cn() +   theme_bw() +   coord_proj(     crs = china_proj,     expand = FALSE,     xlim = c(105, 123),     ylim = c(2, 23)   )"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_boundary_cn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Boundaries of China — geom_boundary_cn","title":"Plot Boundaries of China — geom_boundary_cn","text":"Draw China's administrative boundaries optional map decorations (compass scale bar). boundary category (mainland, coastline, provinces, etc.) can styled independently. data reprojected specified CRS plotting.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_boundary_cn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Boundaries of China — geom_boundary_cn","text":"","code":"geom_boundary_cn(   crs = \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\",   compass = FALSE,   scale = FALSE,   mainland_color = \"black\",   mainland_size = 0.5,   mainland_linetype = \"solid\",   coastline_color = \"blue\",   coastline_size = 0.3,   coastline_linetype = \"solid\",   ten_segment_line_color = \"black\",   ten_segment_line_size = 0.5,   ten_segment_line_linetype = \"solid\",   SAR_boundary_color = \"grey40\",   SAR_boundary_size = 0.5,   SAR_boundary_linetype = \"dashed\",   undefined_boundary_color = \"black\",   undefined_boundary_size = 0.5,   undefined_boundary_linetype = \"longdash\",   province_color = \"transparent\",   province_size = 0.3,   province_linetype = \"solid\",   ... )"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_boundary_cn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Boundaries of China — geom_boundary_cn","text":"crs Character `sf::crs`. Target coordinate reference system plotting. Defaults azimuthal equidistant projection centered China (`+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs`). compass Logical. `TRUE`, add compass pointing true north top-left corner. Default: `FALSE`. scale Logical. `TRUE`, add scale bar bottom-left corner. Default: `FALSE`. mainland_color Character. Line color mainland boundary. Default: `\"black\"`. mainland_size Numeric. Line width mainland boundary. Default: `0.5`. mainland_linetype Character. Line type mainland boundary. Default: `\"solid\"`. coastline_color Character. Line color coastlines. Default: `\"blue\"`. coastline_size Numeric. Line width coastlines. Default: `0.3`. coastline_linetype Character. Line type coastlines. Default: `\"solid\"`. ten_segment_line_color Character. Line color South China Sea ten-segment line. Default: `\"black\"`. ten_segment_line_size Numeric. Line width ten-segment line. Default: `0.5`. ten_segment_line_linetype Character. Line type ten-segment line. Default: `\"solid\"`. SAR_boundary_color Character. Line color Hong Kong Macau SAR boundaries. Default: `\"grey40\"`. SAR_boundary_size Numeric. Line width SAR boundaries. Default: `0.5`. SAR_boundary_linetype Character. Line type SAR boundaries. Default: `\"dashed\"`. undefined_boundary_color Character. Line color undefined disputed boundaries. Default: `\"black\"`. undefined_boundary_size Numeric. Line width undefined boundaries. Default: `0.5`. undefined_boundary_linetype Character. Line type undefined boundaries. Default: `\"longdash\"`. province_color Character. Line color provincial boundaries. Default: `\"transparent\"`. province_size Numeric. Line width provincial boundaries. Default: `0.3`. province_linetype Character. Line type provincial boundaries. Default: `\"solid\"`. ... Additional arguments passed `ggplot2::geom_sf()` (e.g., `alpha`).","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_boundary_cn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Boundaries of China — geom_boundary_cn","text":"list `ggplot2` layers.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_boundary_cn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Boundaries of China — geom_boundary_cn","text":"","code":"# Example 1: Basic China map ggplot() +   geom_boundary_cn() +   theme_minimal()   # Example 2: Add compass and scale bar (easy mode) ggplot() +   geom_boundary_cn(compass = TRUE, scale = TRUE) +   theme_minimal()   # Example 3: Custom styling ggplot() +   geom_boundary_cn(     coastline_color = \"steelblue\",     province_color = \"grey70\",     province_linetype = \"dashed\"   ) +   theme_minimal()   # Example 4: Advanced usage with a custom projected CRS Albers <-  \"+proj=aea +lat_1=25 +lat_2=47 +lat_0=0 +lon_0=105 +x_0=0 +y_0=0 + + datum=WGS84 +units=m +no_defs\"  ggplot() +   geom_boundary_cn(crs = Albers) +   annotation_compass(location = \"tl\", which_north = \"true\") +   annotation_scalebar(location = \"bl\", fixed_width = 500000, display_unit = \"km\") +   coord_sf(crs = Albers) +   theme_minimal()"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_buffer_cn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Buffered Layers for China's Boundary — geom_buffer_cn","title":"Plot Buffered Layers for China's Boundary — geom_buffer_cn","text":"Creates ggplot2 layer displaying buffered areas around China's boundaries, including mainland boundary ten-segment line. Buffers user-defined distances generated around boundary, providing flexibility projection appearance.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_buffer_cn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Buffered Layers for China's Boundary — geom_buffer_cn","text":"","code":"geom_buffer_cn(   mainland_dist = 20000,   ten_line_dist = NULL,   crs = \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\",   color = NA,   fill = \"#D2D5EB\",   ... )"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_buffer_cn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Buffered Layers for China's Boundary — geom_buffer_cn","text":"mainland_dist Numeric. buffer distance (meters) mainland boundary. ten_line_dist Numeric. buffer distance (meters) segment ten-segment line. specified, defaults value `mainland_dist`. crs Character. coordinate reference system (CRS) projection. Defaults \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\". Users can specify CRS strings (e.g., \"+proj=merc\" Mercator). color Character. border color buffer area. Default `NA` (transparent). fill Character. fill color buffer area. Default `\"#D2D5EB\"`. ... Additional parameters passed `geom_sf`.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_buffer_cn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Buffered Layers for China's Boundary — geom_buffer_cn","text":"ggplot2 layer displaying buffered areas around China's boundaries,   customizable buffer distances mainland boundary ten-segment line,   using specified projection.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_buffer_cn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Buffered Layers for China's Boundary — geom_buffer_cn","text":"","code":"# \\donttest{ # Plot buffers with specified distances for mainland and ten-segment line ggplot() +   geom_buffer_cn(     mainland_dist = 10000,     ten_line_dist = 5000   ) +   theme_minimal() #> Warning: attribute variables are assumed to be spatially constant throughout all geometries  # }"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_loc.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Spatial Point Data — geom_loc","title":"Visualize Spatial Point Data — geom_loc","text":"`geom_loc` wrapper around ggplot2::geom_sf() designed visualizing spatial point data. supports sf objects tabular data frames longitude latitude columns, automatically transforming specified coordinate reference system (CRS).","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_loc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Spatial Point Data — geom_loc","text":"","code":"geom_loc(   data,   lon = NULL,   lat = NULL,   crs = \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\",   mapping = ggplot2::aes(),   ... )"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_loc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Spatial Point Data — geom_loc","text":"data data frame, tibble, sf object containing spatial point data. lon character string. name longitude column data (required data tabular). lat character string. name latitude column data (required data tabular). crs character string. target coordinate reference system (CRS) data. Defaults \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\". mapping Aesthetic mappings created ggplot2::aes(), color size. ... Additional parameters passed ggplot2::geom_sf(), size, alpha, color.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_loc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Spatial Point Data — geom_loc","text":"ggplot2 layer visualizing spatial point data, either `sf` object tabular data frame   longitude latitude columns, transforming data specified coordinate reference system (CRS).","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_loc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Spatial Point Data — geom_loc","text":"function simplifies process visualizing spatial data ggplot2 automatically handling CRS transformations providing interface sf tabular data. input tabular data frame, converted sf object using specified longitude latitude columns. See ggplot2::geom_sf() details additional parameters aesthetics.","code":""},{"path":[]},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_loc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Spatial Point Data — geom_loc","text":"","code":"# Generate a random dataset with latitude and longitude set.seed(123) data_sim <- data.frame(   Longitude = runif(100, 80, 120),   Latitude = runif(100, 28, 40),   Category = sample(c(\"Type A\", \"Type B\", \"Type C\"), 100, replace = TRUE) )  # Visualize the data with China's boundaries ggplot() +   geom_boundary_cn() +   geom_loc(     data = data_sim, lon = \"Longitude\", lat = \"Latitude\",     mapping = aes(color = Category), size = 1, alpha = 0.7   ) +   theme_minimal()"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_mapcn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot China Map with Customizable Options — geom_mapcn","title":"Plot China Map with Customizable Options — geom_mapcn","text":"`geom_mapcn()` plots China's administrative boundaries simple, opinionated interface. loads packaged map data `data` `NULL`, removes special row labeled `\"Boundary Line\"`, supports optional attribute-based filtering, can reproject user-specified CRS.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_mapcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot China Map with Customizable Options — geom_mapcn","text":"","code":"geom_mapcn(   data = NULL,   admin_level = \"province\",   crs = \"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\",   color = \"black\",   fill = \"white\",   linewidth = 0.5,   filter_attribute = NULL,   filter = NULL,   mapping = NULL,   ... )"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_mapcn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot China Map with Customizable Options — geom_mapcn","text":"data `sf` object geometries draw. `NULL`, function loads packaged dataset chosen `admin_level`. admin_level Administrative level plot. One `\"province\"` (default), `\"city\"`, `\"county\"`. correspond packaged files `China_sheng.rda`, `China_shi.rda`, `China_xian.rda`. crs Coordinate Reference System use plotting. Defaults Azimuthal Equidistant projection centered China: `\"+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs\"`. Accepts proj strings EPSG codes (e.g., `\"EPSG:4326\"`). color Border color. Default `\"black\"`. fill Fill color. Default `\"white\"`. linewidth Border line width. Default `0.5`. older `ggplot2` versions, use `size` instead `linewidth`. filter_attribute Optional column name used filter features (e.g., `\"name_en\"`). filter Optional character vector values keep (e.g., `c(\"Beijing\",\"Shanghai\")`). supplied `filter_attribute`, features filtered accordingly. result empty, error thrown. mapping Optional aesthetics mapping passed `geom_sf()`. Useful already aesthetics apply (e.g., fill). ... Additional arguments forwarded `ggplot2::geom_sf()`.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_mapcn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot China Map with Customizable Options — geom_mapcn","text":"`ggplot2` layer.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_mapcn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot China Map with Customizable Options — geom_mapcn","text":"","code":"# Basic provincial map ggplot2::ggplot() +   geom_mapcn() +   ggplot2::theme_minimal()   # Filter by names stored in the data (e.g., English names) ggplot2::ggplot() +   geom_mapcn(filter_attribute = \"name_en\",              filter = c(\"Beijing\", \"Shanghai\"),              fill = \"red\") +   ggplot2::theme_minimal()   # Use a different projection ggplot2::ggplot() +   geom_mapcn(crs = \"+proj=merc\", linewidth = 0.7) +   ggplot2::theme_minimal()"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_world.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot World Map with Customizable Options — geom_world","title":"Plot World Map with Customizable Options — geom_world","text":"wrapper around [ggplot2::geom_sf()] visualizing world maps customizable options. function allows custom projections, filtering specific countries regions, detailed aesthetic customizations borders fills.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_world.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot World Map with Customizable Options — geom_world","text":"","code":"geom_world(   data = NULL,   crs = \"+proj=longlat +datum=WGS84\",   color = \"black\",   fill = \"white\",   linewidth = 0.5,   filter_attribute = \"SOC\",   filter = NULL,   ... )"},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_world.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot World Map with Customizable Options — geom_world","text":"data `sf` object containing world map data. `NULL`, default world map data package loaded `.rda` file. crs character string specifying target coordinate reference system (CRS) map projection. Defaults `\"+proj=longlat +datum=WGS84\"`. color character string specifying border color administrative boundaries. Default `\"black\"`. fill character string specifying fill color administrative areas. Default `\"white\"`. linewidth numeric value specifying line width administrative boundaries. Default `0.5`. filter_attribute character string specifying column name used filtering countries regions. Default `\"SOC\"`, refers ISO 3166-1 alpha-3 country code default dataset. filter character vector specifying values filter specific countries regions. Default `NULL`. ... Additional parameters passed [ggplot2::geom_sf()], `size`, `alpha`, `lty`.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_world.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot World Map with Customizable Options — geom_world","text":"`ggplot2` layer world map visualization.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_world.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot World Map with Customizable Options — geom_world","text":"function simplifies process creating world maps combining functionality `geom_sf` user-friendly options projections, filtering, custom styling. Key features include: - **Custom projections**: Easily apply CRS map. - **Filtering attributes**: Quickly focus specific countries regions. - **Flexible aesthetics**: Customize fill, borders, transparency, visual properties.","code":""},{"path":[]},{"path":"https://rimagination.github.io/ggmapcn/reference/geom_world.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot World Map with Customizable Options — geom_world","text":"","code":"# \\donttest{   # Plot the default world map   ggplot() +     geom_world() +     theme_minimal()     # Using Robinson projection with central meridian at 0°   ggplot() +     geom_world(crs = \"+proj=robin +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m\") +     theme_minimal()     # Filter specific countries (e.g., China and its neighbors)   china_neighbors <- c(\"CHN\", \"AFG\", \"BTN\", \"MMR\", \"LAO\", \"NPL\", \"PRK\", \"KOR\",                        \"KAZ\", \"KGZ\", \"MNG\", \"IND\", \"BGD\", \"TJK\", \"PAK\", \"LKA\", \"VNM\")   ggplot() +     geom_world(filter = china_neighbors) +     theme_minimal()     # Background map + Highlight specific region   ggplot() +     geom_world(fill = \"gray80\", color = \"gray50\", alpha = 0.5) +     geom_world(filter = c(\"CHN\"), fill = \"red\", color = \"black\", linewidth = 1.5) +     theme_minimal()     # Customize styles with transparency and bold borders   ggplot() +     geom_world(fill = \"lightblue\", color = \"darkblue\", linewidth = 1, alpha = 0.8) +     theme_void()  # }"},{"path":"https://rimagination.github.io/ggmapcn/reference/ggmapcn-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggmapcn: Customizable China Map Visualizations — ggmapcn-package","title":"ggmapcn: Customizable China Map Visualizations — ggmapcn-package","text":"'ggplot2' extension visualizing China’s map, offering customizable projections, boundary styles, buffer zones, annotation layers compass scale bars.","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/ggmapcn-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ggmapcn: Customizable China Map Visualizations — ggmapcn-package","text":"Main features: - Projection-aware compass (`annotation_compass`) scale bar (`annotation_scalebar`). - Built-geodata management via `check_geodata`. - Multiple compass styles (classic, rose, Sinan, guiding fish, etc.). - Easy integration ggplot2 sf workflows.","code":""},{"path":[]},{"path":"https://rimagination.github.io/ggmapcn/reference/ggmapcn-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggmapcn: Customizable China Map Visualizations — ggmapcn-package","text":"Maintainer: Liang Ren rl23@mails.tsinghua.edu.cn (ORCID)","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/north_arrow_classic.html","id":null,"dir":"Reference","previous_headings":"","what":"Classic North Arrow Style (Minimal) — north_arrow_classic","title":"Classic North Arrow Style (Minimal) — north_arrow_classic","text":"Classic North Arrow Style (Minimal)","code":""},{"path":"https://rimagination.github.io/ggmapcn/reference/north_arrow_classic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classic North Arrow Style (Minimal) — north_arrow_classic","text":"","code":"north_arrow_classic(   fill = c(\"white\", \"black\"),   line_col = \"black\",   line_width = 2,   text_col = \"black\",   text_size = 12,   text_face = \"plain\",   text_family = \"\" )"},{"path":"https://rimagination.github.io/ggmapcn/reference/north_arrow_classic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classic North Arrow Style (Minimal) — north_arrow_classic","text":"grob representing simple black arrow \"N\".","code":""}]
