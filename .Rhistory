)
View(longlake_depth_raster)
View(longlake_depthdf)
# 将 pollen 数据转换为 sf 并投影到目标坐标系
pollen_sf <- st_as_sf(pollen,
coords = c("Longitude (°E)", "Latitude (°N)"),
crs = 4326)  # 首先定义原始坐标系
View(pollen_sf)
pollen_sf
ggplot() +
# 使用 ggmapcn 绘制中国地图
geom_mapcn() +
# 使用 ggspatial 绘制投影后的采样点
annotation_spatial(data = pollen_sf,
aes(color = `Sample type`),
size = 2, alpha = 0.7) +
scale_color_manual(values = c("Lake sediment surface" = "blue",
"Core top" = "red",
"Soil surface" = "green")) +
labs(title = "中国现代花粉数据采样点分布（投影坐标系）",
color = "采样类型") +
theme_minimal()
unique(pollen_sf)
unique(pollen_sf$`Sample type`)
ggplot() +
# 使用 ggmapcn 绘制中国地图
geom_mapcn() +
# 使用 ggspatial 绘制投影后的采样点
annotation_spatial(data = pollen_sf,
aes(color = `Sample type`),
size = 2, alpha = 0.7) +
labs(         color = "采样类型") +
theme_minimal()
ggplot() +
# 使用 ggmapcn 绘制中国地图
geom_mapcn() +
# 使用 ggspatial 绘制投影后的采样点
annotation_spatial(data = pollen_sf,
aes(color = `Sample type`),
size = 2, alpha = 0.7) +
labs(         color = "采样类型") +
theme_bw()
ggplot() +
# 使用 ggmapcn 绘制中国地图
geom_mapcn(fill="white") +
# 使用 ggspatial 绘制投影后的采样点
annotation_spatial(data = pollen_sf,
aes(color = `Sample type`),
size = 2, alpha = 0.7) +
labs(color = "采样类型") +
theme_bw()
# 读取数据
pollen <- read_excel("data-raw/pollen.xlsx")
# 将数据保存到 `data/` 目录中
usethis::use_data(pollen, overwrite = TRUE)
pollen$lon<-pollen$`Longitude (°E)`
pollen$lat<-pollen$`Latitude (°N)`
# 将 pollen 数据转换为 sf 并投影到目标坐标系
pollen_sf <- st_as_sf(pollen,
coords = c("Longitude (°E)", "Latitude (°N)"),
crs = 4326)  # 首先定义原始坐标系
View(pollen_sf)
names(pollen)[20]<-"Lon"
names(pollen)[21]<-"Lat"
# 将 pollen 数据转换为 sf 并投影到目标坐标系
pollen_sf <- st_as_sf(pollen,
coords = c("Longitude (°E)", "Latitude (°N)"),
crs = 4326)  # 首先定义原始坐标系
# 读取数据
pollen <- read_excel("data-raw/pollen.xlsx")
# 将数据保存到 `data/` 目录中
usethis::use_data(pollen, overwrite = TRUE)
pollen$Lon<-pollen$`Longitude (°E)`
pollen$Lat<-pollen$`Latitude (°N)`
# 将 pollen 数据转换为 sf 并投影到目标坐标系
pollen_sf <- st_as_sf(pollen,
coords = c("Longitude (°E)", "Latitude (°N)"),
crs = 4326)  # 首先定义原始坐标系
View(pollen_sf)
View(pollen)
usethis::use_data(pollen, overwrite = TRUE)
pollen
pollen
data("pollen")
force(pollen)
View(pollen)
# 读取数据
pollen <- read_excel("data-raw/pollen.xlsx")
# 将数据保存到 `data/` 目录中
usethis::use_data(pollen, overwrite = TRUE)
data("pollen")
sf_points <- table_to_sf(data = pollen,
lon_col = "Longitude (°E)",
lat_col = "Latitude (°N)")
# 加载数据
data("pollen")
# 使用正确的参数名称调用 table_to_sf
sf_points <- table_to_sf(data = pollen,
lon = "Longitude (°E)",
lat = "Latitude (°N)")
View(sf_points)
ggplot() +
geom_mapcn() +  # Plot China map
geom_sf(data = sf_pollen, aes(color = `Sample type`), size = 2, alpha = 0.7) +
labs(title = "Distribution of Modern Pollen Samples in China",
color = "Sample Type") +
theme_minimal()
ggplot() +
geom_mapcn() +  # Plot China map
geom_sf(data = sf_points, aes(color = `Sample type`), size = 2, alpha = 0.7) +
labs(title = "Distribution of Modern Pollen Samples in China",
color = "Sample Type") +
theme_minimal()
# 加载数据
data("pollen")
# 使用正确的参数名称调用 table_to_sf
sf_points <- table_to_sf(data = pollen,
lon = "Longitude (°E)",
lat = "Latitude (°N)")
ggplot() +
geom_mapcn() +  # Plot China map
geom_sf(data = sf_points, aes(color = `Sample type`), size = 2, alpha = 0.7) +
labs(title = "Distribution of Modern Pollen Samples in China",
color = "Sample Type") +
theme_minimal()
ggplot() +
geom_mapcn() +  # Plot China map
geom_sf(data = sf_points, aes(color = 样品类型), size = 2, alpha = 0.7) +
labs(title = "Distribution of Modern Pollen Samples in China",
color = "样品类型") +
theme_minimal()
ggplot() +
geom_mapcn() +  # Plot China map
geom_sf(data = sf_points, aes(color = 样品类型), size = 2, alpha = 0.7) +
labs(color = "样品类型") +
theme_minimal()
ggplot() +
geom_mapcn(alpha=0.3) +  # Plot China map
geom_sf(data = sf_points, aes(color = 样品类型), size = 2, alpha = 0.7) +
labs(color = "样品类型") +
theme_minimal()
ggplot() +
geom_mapcn(alpha=0.3) +  # Plot China map
geom_sf(data = sf_points, aes(color = 样品类型), size = 2, alpha = 0.7,shape=21) +
labs(color = "样品类型") +
theme_minimal()
ggplot() +
geom_mapcn(alpha=0.3) +  # Plot China map
geom_sf(data = sf_points, aes(color = 样品类型), size = 2, alpha = 0.7,shape=16) +
labs(color = "样品类型") +
theme_minimal()
ggplot() +
geom_mapcn(alpha=0.3) +  # Plot China map
geom_sf(data = sf_points, aes(color = 样品类型), size = 1, alpha = 0.7,shape=16) +
labs(color = "样品类型") +
theme_minimal()
?pollen
?geom_loc
geom_loc(data = pollen, lon = "Longitude (°E)", lat = "Latitude (°N)", aes(color = `Sample type`), size = 1, alpha = 0.7)
ggplot()+
geom_loc(data = pollen, lon = "Longitude (°E)", lat = "Latitude (°N)", aes(color = `Sample type`), size = 1, alpha = 0.7)
ggplot()+
geom_loc(data = pollen, lon = "Longitude (°E)", lat = "Latitude (°N)", aes(color = `Sample type`), size = 1, alpha = 0.7)
ggplot() +
geom_loc(data = pollen, lon = "Longitude (°E)", lat = "Latitude (°N)", aes(color = `Sample type`), size = 1, alpha = 0.7)
ggplot() +
geom_loc(data = pollen, lon = "Longitude (°E)", lat = "Latitude (°N)", aes(color = `Sample type`), size = 1, alpha = 0.7)+
geom_boundary_cn()
ggplot() +
geom_loc(data = pollen, lon = "Longitude (°E)", lat = "Latitude (°N)", aes(color = `Sample type`), size = 1, alpha = 0.7)+
geom_boundary_cn()
ggplot() +
geom_loc(data = pollen, lon = "Longitude (°E)", lat = "Latitude (°N)", aes(color = `Sample type`), size = 1, alpha = 0.7)
sf_data <- st_as_sf(pollen, coords = c("Longitude (°E)", "Latitude (°N)"), crs = 4326)
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
library(sf)
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
?st_transform
data <- st_transform(sf_data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
st_as_sf
# 读取数据
x <- read_excel("data-raw/pollen.xlsx")
View(pollen)
# 加载必要的包
library(usethis)
library(readxl)
# 读取数据
pollen <- read_excel("data-raw/pollen.xlsx")
View(pollen)
names(pollen)[4]<-"Longitude"
names(pollen)[5]<-"Latitude"
usethis::use_data(pollen, overwrite = TRUE)
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude", aes(color = `Sample type`), size = 1, alpha = 0.7)
ggplot() +
geom_loc(data = pollen, lon = Longitude, lat = Latitude, aes(color = `Sample type`), size = 1, alpha = 0.7)
data(pollen)
View(data)
force(pollen)
data(pollen)
force(pollen)
View(pollen)
ggplot() +
geom_loc(data = pollen, lon = Longitude, lat = Latitude, aes(color = `Sample type`), size = 1, alpha = 0.7)
ggplot() +
geom_loc(data = pollen, lon = `Longitude`, lat = `Latitude`, aes(color = `Sample type`), size = 1, alpha = 0.7)
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude", aes(color = `Sample type`), size = 1, alpha = 0.7)
data(pollen) # Load the example data provided by the package
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude", aes(color = `Sample type`), size = 1, alpha = 0.7)
?geom_boundary_cn
ggplot() +
geom_boundary_cn() +
theme_minimal()
ggplot() +
geom_boundary_cn(crs=4326) +
theme_minimal()
data<-data(pollen)
data(pollen)
force(pollen)
data(pollen)
force(pollen)
ggplot() +
#'   geom_loc(data = pollen, lon = "Longitude", lat = "Latitude", aes(color = `Sample type`), size = 1, alpha = 0.7)
)
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude", aes(color = `Sample type`), size = 1, alpha = 0.7)
if (!inherits(pollen, "sf")) {
if (is.null(lon) || is.null(lat)) {
stop("Both 'lon' and 'lat' must be specified for tabular data.")
}
data1 <- sf::st_as_sf(pollen, coords = c(lon, lat), crs = 4326, remove = FALSE) # Assume tabular data is in WGS 84
}
if (!inherits(pollen, "sf")) {
if (is.null(lon) || is.null(lat)) {
stop("Both 'lon' and 'lat' must be specified for tabular data.")
}
data1 <- sf::st_as_sf(pollen, coords =  c("Longitude", "Latitude"), crs = 4326, remove = FALSE) # Assume tabular data is in WGS 84
}
if (!inherits(pollen, "sf")) {
if (is.null("Longitude") || is.null("Longitude")) {
stop("Both 'lon' and 'lat' must be specified for tabular data.")
}
data1 <- sf::st_as_sf(pollen, coords =  c("Longitude", "Longitude"), crs = 4326, remove = FALSE) # Assume tabular data is in WGS 84
}
View(data1)
data2 <- sf::st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs") # Ensure crs is a string
data2 <- sf::st_transform(data1, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs") # Ensure crs is a string
ggplot()+
geom_sf(data = data2)
View(pollen)
View(data2)
View(data1)
plot(data1)
# 读取数据
pollen <- read_excel("data-raw/pollen.xlsx")
View(pollen)
names(pollen)[4]<-"Longitude"
names(pollen)[5]<-"Latitude"
# 将数据保存到 `data/` 目录中
usethis::use_data(pollen, overwrite = TRUE)
# 将 pollen 数据转换为 sf 并投影到目标坐标系
pollen_sf <- st_as_sf(pollen,
coords = c("Longitude (°E)", "Latitude (°N)"),
crs = 4326)  # 首先定义原始坐标系
# 将 pollen 数据转换为 sf 并投影到目标坐标系
pollen_sf <- st_as_sf(pollen,
coords = c("Longitude", "Latitude"),
crs = 4326)  # 首先定义原始坐标系
View(pollen_sf)
?geom_loc
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude", aes(color = `Sample type`), size = 1, alpha = 0.7)
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude",
aes(color = `Sample type`), size = 1, alpha = 0.7) +
labs(title = "Sample Points on Map")
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude",
aes(color = `Sample type`), size = 1, alpha = 0.7) +
labs(title = "Sample Points on Map")
ls("package:ggmapcn")
library(ggmapcn)
?geom_loc
?geom_loc
data(pollen) # Load built-in pollen dataset
ggplot() +
geom_loc(data = pollen, lon = "Longitude (°E)", lat = "Latitude (°N)",
aes(color = `Sample type`), size = 1, alpha = 0.7) +
labs(title = "Sample Points on Map")
View(pollen)
data(pollen) # Load built-in pollen dataset
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude",
aes(color = `Sample type`), size = 1, alpha = 0.7) +
labs(title = "Sample Points on Map")
data(pollen) # Load built-in pollen dataset
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude",
size = 1, alpha = 0.7) +
labs(title = "Sample Points on Map")
library(sf)
sf_data <- st_as_sf(pollen, coords = c("Longitude", "Latitude"), crs = 4326)
ggplot() +
geom_loc(data = sf_data, aes(color = "Sample type"), size = 1, alpha = 0.7) +
labs(title = "Sample Points on Map")
library(sf)
sf_data <- st_as_sf(pollen, coords = c("Longitude", "Latitude"), crs = 4326)
ggplot() +
geom_loc(data = sf_data, aes(color = "Sample type"), size = 1, alpha = 0.7) +
geom_boundary_cn()+
labs(title = "Sample Points on Map")
library(sf)
sf_data <- st_as_sf(pollen, coords = c("Longitude", "Latitude"), crs = 4326)
ggplot() +
geom_loc(data = sf_data, aes(color = "Sample type"), size = 1, alpha = 0.7) +
geom_mapcn(fill="white")+
labs(title = "Sample Points on Map")
library(sf)
sf_data <- st_as_sf(pollen, coords = c("Longitude", "Latitude"), crs = 4326)
ggplot() +
geom_mapcn(fill="white")+
geom_loc(data = sf_data, aes(color = "Sample type"), size = 1, alpha = 0.7) +
labs(title = "Sample Points on Map")
library(sf)
sf_data <- st_as_sf(pollen, coords = c("Longitude", "Latitude"), crs = 4326)
ggplot() +
geom_mapcn(fill="white")+
geom_loc(data = sf_data, aes(color = "Sample type"), size = 1, alpha = 0.7) +
theme_bw()
library(sf)
sf_data <- st_as_sf(pollen, coords = c("Longitude", "Latitude"), crs = 4326)
ggplot() +
geom_mapcn(fill="white")+
geom_loc(data = sf_data, aes(color = `Sample type`), size = 1, alpha = 0.7) +
theme_bw()
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude",
mapping = aes(color = `Sample type`), size = 1, alpha = 0.7) +
labs(title = "Sample Points on Map")
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude",
mapping = aes(color = `Sample type`), size = 1, alpha = 0.2) +
labs(title = "Sample Points on Map")
View(pollen)
mapping = aes(color = "样品类型"), size = 1, alpha = 0.7) +
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude",
mapping = aes(color = "样品类型"), size = 1, alpha = 0.2) +
labs(title = "Sample Points on Map")
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude",
mapping = aes(color = `样品类型`), size = 1, alpha = 0.2) +
labs(title = "Sample Points on Map")
ggplot() +
geom_loc(data = pollen, lon = "Longitude", lat = "Latitude",
mapping = aes(color = `样品类型`), size = 1, alpha = 0.2) +
styler::style_pkg()
lintr::lint_package()
?color_table
# 使用宋体
ggplot(data, aes(x, y)) +
geom_point() +
theme(text = element_text(family = "SimSun"))  # 宋体
library(ggplot2)
# 使用宋体
ggplot(data, aes(x, y)) +
geom_point() +
theme(text = element_text(family = "SimSun"))  # 宋体
# 使用宋体
ggplot(cars, aes(x, y)) +
geom_point() +
theme(text = element_text(family = "SimSun"))  # 宋体
cars
# 使用宋体
ggplot(cars, aes(speed, dist)) +
geom_point() +
theme(text = element_text(family = "SimSun"))  # 宋体
# 使用宋体
ggplot(cars, aes(speed, dist)) +
geom_point() +
theme(text = element_text(family = "Times New Roman"))  # 宋体
library(extrafont)
font_import()
fonts()
# 使用宋体
ggplot(cars, aes(speed, dist)) +
geom_point() +
theme(text = element_text(family = "Times New Roman"))
# 创建地图
ggplot() +
# 添加 ggspatial 的 Stamen 底图
annotation_map_tile(type = "stamen.toner") +
# 绘制中国地图边界，使用 ggmapcn 的函数
geom_mapcn() +
# 添加一个标题
labs(title = "中国地图与 Stamen 底图的结合") +
theme_minimal()
# 创建地图
ggplot() +
# 添加 ggspatial 的 Stamen 底图
ggspatial::annotation_map_tile(type = "stamen.toner") +
# 绘制中国地图边界，使用 ggmapcn 的函数
geom_mapcn() +
# 添加一个标题
labs(title = "中国地图与 Stamen 底图的结合") +
theme_minimal()
library(ggspatial)
# 创建地图
ggplot() +
# 添加 ggspatial 的 Stamen 底图
annotation_map_tile(type = "stamen.toner") +
# 绘制中国地图边界，使用 ggmapcn 的函数
geom_mapcn() +
# 添加一个标题
labs(title = "中国地图与 Stamen 底图的结合") +
theme_minimal()
install.packages("prettymapr")
# 创建地图
ggplot() +
# 添加 ggspatial 的 Stamen 底图
annotation_map_tile(type = "stamen.toner") +
# 绘制中国地图边界，使用 ggmapcn 的函数
geom_mapcn() +
# 添加一个标题
labs(title = "中国地图与 Stamen 底图的结合") +
theme_minimal()
# 创建地图
ggplot() +
# 添加 ggspatial 的 Stamen 底图
annotation_map_tile(type = "stamen.toner")
?annotation_map_tile
library(ggplot2)
load_longlake_data(which = "longlake_waterdf")
ggplot() +
annotation_map_tile(zoom = 13, cachedir = system.file("rosm.cache", package = "ggspatial")) +
geom_sf(data = longlake_waterdf, fill = NA, col = "grey50")
ggplot()+
ggmapcn()
ggplot()+
geom_mapcn()
ggplot()+
geom_mapcn() +
coord_sf(xlim = c(105, 125), ylim = c(0, 25), expand = FALSE)
ggplot()+
geom_boundary_cn() +
coord_sf(xlim = c(105, 125), ylim = c(0, 25), expand = FALSE)
main_data <- geom_mapcn()
inset_data <- geom_mapcn() +
coord_sf(xlim = c(105, 125), ylim = c(0, 25), expand = FALSE)
combined_plot <- geom_map_inset(
main_data,
inset_data,
inset_position = "br",
inset_size = 0.25,
orientation = "landscape"
)
ggplot()+
geom_mapcn()+
geom_boundary_cn()
ggplot()+
geom_mapcn()+
geom_boundary_cn()+
theme_bw()
?geom_map
?geom_mapcn
# Load package data explicitly and use custom projection
china_path <- system.file("extdata", "China_shi.geojson", package = "ggmapcn")
china_data <- sf::st_read(china_path, quiet = TRUE)
# Use Lambert Azimuthal Equal-Area (LAEA) projection
ggplot() +
geom_mapcn(crs = "+proj=laea +lat_0=40 +lon_0=104")
# Load package data explicitly and use custom projection
china_path <- system.file("extdata", "China_shi.geojson", package = "ggmapcn")
china_data <- sf::st_read(china_path, quiet = TRUE)
# Use Lambert Azimuthal Equal-Area (LAEA) projection
ggplot() +
geom_mapcn(data=china_data, crs = "+proj=laea +lat_0=40 +lon_0=104")
# Load package data explicitly and use custom projection
china_path <- system.file("extdata", "China_shi.geojson", package = "ggmapcn")
china_shi <- sf::st_read(china_path, quiet = TRUE)
# Use Albers Equal Area Conic projection
ggplot() +
geom_mapcn(data=china_shi, crs = "+proj=aea +lat_1=25 +lat_2=47 +lon_0=105")
# Load package data explicitly and use custom projection
china_path <- system.file("extdata", "China_shi.geojson", package = "ggmapcn")
china_shi <- sf::st_read(china_path, quiet = TRUE)
# Use Albers Equal Area Conic projection
ggplot() +
geom_mapcn(data=china_shi, crs = "+proj=aea +lat_1=25 +lat_2=47 +lon_0=110")
# Load package data explicitly and use custom projection
china_path <- system.file("extdata", "China_shi.geojson", package = "ggmapcn")
china_shi <- sf::st_read(china_path, quiet = TRUE)
# Use Albers Equal Area Conic projection
ggplot() +
geom_mapcn(data=china_shi, crs = "+proj=aea +lat_1=25 +lat_2=47 +lon_0=110")
# Use Albers Equal Area Conic projection
ggplot() +
geom_mapcn(data=china_data, crs = "+proj=aea +lat_1=25 +lat_2=47 +lon_0=110")+
theme_bw() # Apply a black-and-white theme for a clean look
# Load the China provincial map data from the package
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china_data <- sf::st_read(china_path, quiet = TRUE)
# Use Albers Equal Area Conic projection
ggplot() +
geom_mapcn(data=china_data, crs = "+proj=aea +lat_1=25 +lat_2=47 +lon_0=110")+
theme_bw() # Apply a black-and-white theme for a clean look
usethis::use_vignette(name = "ggmapcn")
?geom_loc
usethis::use_vignette(name = "Adding Spatial Point Data Layer with Color by Grouping")
usethis::use_vignette(name = "Adding_Spatial_Data")
