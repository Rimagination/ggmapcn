library(sf)
library(dplyr)
# 合并 sf 对象
merged1 <- bind_rows(main, coast,ten_line,undefined)
# 删除多余属性
merged1 <- merged1 %>% select(-gb,-FID_中国, -Shape_Leng)
# 保存为 GeoJSON 文件
st_write(merged1, "D:/权威地图/天地图准确拆分/buffer_line.geojson", driver = "GeoJSON")
#生成缓冲线
# 合并 sf 对象
merged2 <- bind_rows(main, ten_line)
# 删除多余属性
merged2 <- merged2 %>% select(-gb,-FID_中国, -Shape_Leng)
# 保存为 GeoJSON 文件
st_write(merged2, "D:/权威地图/天地图准确拆分/buffer_line.geojson", driver = "GeoJSON")
#载入查看
buffer <- st_read("D:/权威地图/天地图准确拆分/buffer_line.geojson")
plot(buffer)
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland_line", ], dist = 20000, singleSide = TRUE)
dashline_buffer <- st_buffer(data[data$name == "10_dashline", ], dist = 20000, singleSide = TRUE)
# Combine buffers
buffer_data <- rbind(mainland_buffer, dashline_buffer)
ggplot()+
geom_sf(data = buffer_data)+
geom_boundary_cn()
ggplot()+
geom_boundary_cn()
ggplot()+
geom_boundary_cn()
sar <- st_read("D:/权威地图/天地图准确拆分/sar.shp")
ten_line <- st_read("D:/权威地图/天地图准确拆分/纯十段线.shp")
main<- st_read("D:/权威地图/天地图准确拆分/大陆已定.shp")
coast<- st_read("D:/权威地图/天地图准确拆分/海岸线.shp")
undefined<- st_read("D:/权威地图/天地图准确拆分/未定国界.shp")
# 修改 name 属性
sar$name <- "SAR_boundary"
coast$name <- "coastline"
main$name <- "mainland"
ten_line$name <- "10_dashline"
undefined$name <- "undefined_boundary"
# 合并 sf 对象
merged1 <- bind_rows(main, coast,ten_line,sar,undefined)
# 删除多余属性
merged1 <- merged1 %>% select(-gb,-FID_中国, -Shape_Leng)
# 保存为 GeoJSON 文件
st_write(merged1, "D:/权威地图/天地图准确拆分/boundary.geojson", driver = "GeoJSON")
st_write(merged1, "D:/权威地图/天地图准确拆分/boundary.geojson", driver = "GeoJSON")
ggplot()+
geom_boundary_cn()
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland_line", ], dist = 20000, singleSide = TRUE)
dashline_buffer <- st_buffer(data[data$name == "10_dashline", ], dist = 20000, singleSide = TRUE)
# Combine buffers
buffer_data <- rbind(mainland_buffer, dashline_buffer)
ggplot()+
geom_sf(data = buffer_data)+
geom_boundary_cn()
ggplot2::ggplot() +
geom_buffer_cn(
mainland_dist = 10000
) +
theme_minimal()
# Load the default buffer data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
data
# Load the default buffer data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
data
library(sf)
library(dplyr)
sar <- st_read("D:/权威地图/天地图准确拆分/sar.shp")
ten_line <- st_read("D:/权威地图/天地图准确拆分/纯十段线.shp")
main<- st_read("D:/权威地图/天地图准确拆分/大陆已定.shp")
coast<- st_read("D:/权威地图/天地图准确拆分/海岸线.shp")
undefined<- st_read("D:/权威地图/天地图准确拆分/未定国界.shp")
# 修改 name 属性
sar$name <- "SAR_boundary"
coast$name <- "coastline"
main$name <- "mainland"
ten_line$name <- "ten_segment_line"
undefined$name <- "undefined_boundary"
# 合并 sf 对象
merged1 <- bind_rows(main, coast,ten_line,sar,undefined)
library(sf)
library(dplyr)
sar <- st_read("D:/权威地图/天地图准确拆分/sar.shp")
ten_line <- st_read("D:/权威地图/天地图准确拆分/纯十段线.shp")
main<- st_read("D:/权威地图/天地图准确拆分/大陆已定.shp")
coast<- st_read("D:/权威地图/天地图准确拆分/海岸线.shp")
undefined<- st_read("D:/权威地图/天地图准确拆分/未定国界.shp")
# 修改 name 属性
sar$name <- "SAR_boundary"
coast$name <- "coastline"
main$name <- "mainland"
ten_line$name <- "ten_segment_line"
undefined$name <- "undefined_boundary"
# 合并 sf 对象
merged1 <- bind_rows(main, coast,ten_line,sar,undefined)
# 删除多余属性
merged1 <- merged1 %>% select(-gb,-FID_中国, -Shape_Leng)
# 保存为 GeoJSON 文件
st_write(merged1, "D:/权威地图/天地图准确拆分/boundary.geojson", driver = "GeoJSON")
#载入查看
boundary <- st_read("D:/权威地图/天地图准确拆分/boundary.geojson")
plot(boundary)
library(sf)
library(dplyr)
#生成缓冲线
ten_line <- st_read("D:/权威地图/天地图准确拆分/纯十段线.shp")
main<- st_read("D:/权威地图/天地图准确拆分/大陆.shp")
# 修改 name 属性
main$name <- "mainland"
ten_line$name <- "ten_segment_line"
#生成缓冲线
ten_line <- st_read("D:/权威地图/天地图准确拆分/纯十段线.shp")
main<- st_read("D:/权威地图/天地图准确拆分/大陆.shp")
# 修改 name 属性
main$name <- "mainland"
ten_line$name <- "ten_segment_line"
# 合并 sf 对象
merged2 <- bind_rows(main, ten_line)
# 删除多余属性
merged2 <- merged2 %>% select(-gb,-FID_中国, -Shape_Leng)
# 保存为 GeoJSON 文件
st_write(merged2, "D:/权威地图/天地图准确拆分/buffer_line.geojson", driver = "GeoJSON")
#载入查看
buffer <- st_read("D:/权威地图/天地图准确拆分/buffer_line.geojson")
ggplot2::ggplot() +
geom_buffer_cn(
mainland_dist = 10000
) +
theme_minimal()
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
plot(data)
#生成缓冲线
ten_line <- st_read("D:/权威地图/天地图准确拆分/纯十段线.shp")
main<- st_read("D:/权威地图/天地图准确拆分/大陆.shp")
plot(main)
#生成缓冲线
ten_line <- st_read("D:/权威地图/天地图准确拆分/纯十段线.shp")
main<- st_read("D:/权威地图/天地图准确拆分/大陆.shp")
plot(main)
# 修改 name 属性
main$name <- "mainland"
ten_line$name <- "ten_segment_line"
# 合并 sf 对象
merged2 <- bind_rows(main, ten_line)
# 删除多余属性
merged2 <- merged2 %>% select(-gb,-FID_中国, -Shape_Leng)
# 保存为 GeoJSON 文件
st_write(merged2, "D:/权威地图/天地图准确拆分/buffer_line.geojson", driver = "GeoJSON")
st_write(merged2, "D:/权威地图/天地图准确拆分/buffer_line.geojson", driver = "GeoJSON")
#载入查看
buffer <- st_read("D:/权威地图/天地图准确拆分/buffer_line.geojson")
plot(buffer)
ggplot2::ggplot() +
geom_buffer_cn(
mainland_dist = 10000
) +
theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(
mainland_dist = 10000
) +
theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(
mainland_dist = 10000
) +
theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(
mainland_dist = 50000
) +
theme_minimal()
ggplot() +
geom_buffer_cn(
mainland_dist = 10000
) +
geom_boundary_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn(
mainland_dist = 50000
) +
geom_boundary_cn()+
theme_minimal()
# Load the default buffer data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
# Apply the specified or default projection
data <- st_transform(data, crs = crs)
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = mainland_dist)
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = 20000)
dashline_buffer <- st_buffer(data[data$name == "ten_segment_line", ], dist = 20000, singleSide = TRUE)
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = 20000)
dashline_buffer <- st_buffer(data[data$name == "ten_segment_line", ], dist = -20000, singleSide = TRUE)
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = 20000)
dashline_buffer <- st_buffer(data[data$name == "ten_segment_line", ], dist = -20000, singleSide = TRUE)
ggplot() +
geom_sf(data=dashline_buffer)+
geom_boundary_cn()+
theme_minimal()
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = 20000)
dashline_buffer <- st_buffer(data[data$name == "ten_segment_line", ], dist = -20000, singleSide = TRUE)
ggplot() +
geom_sf(data=dashline_buffer,fill="pink")+
geom_boundary_cn()+
theme_minimal()
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = 20000)
dashline_buffer <- st_buffer(data[data$name == "ten_segment_line", ], dist = -20000, singleSide = TRUE)
ggplot() +
geom_sf(data=dashline_buffer,fill="pink",color="")+
geom_boundary_cn()+
theme_minimal()
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = 20000)
dashline_buffer <- st_buffer(data[data$name == "ten_segment_line", ], dist = -20000, singleSide = TRUE)
ggplot() +
geom_sf(data=dashline_buffer,fill="pink",color=NA)+
geom_boundary_cn()+
theme_minimal()
library(sf)
ggplot2::ggplot() +
geom_buffer_cn(
mainland_dist = 10000
) +
theme_minimal()
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = 20000)
dashline_buffer <- st_buffer(data[data$name == "ten_segment_line", ], dist = -20000, singleSide = TRUE)
ggplot() +
geom_sf(data=dashline_buffer,fill="pink",color=NA)+
geom_boundary_cn()+
theme_minimal()
dashline_buffer
# Load the default buffer data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
data
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
ten_segment_lines <- st_cast(data[data$name == "ten_segment_line", ], "LINESTRING")
# Create buffers for mainland border and ten-dash line
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = 20000)
dashline_buffer <- st_buffer(ten_segment_lines, dist = -20000, singleSide = TRUE)
ggplot() +
geom_sf(data=dashline_buffer,fill="pink",color=NA)+
geom_boundary_cn()+
theme_minimal()
ten_segment_lines
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")\
# Apply the specified or default projection
data <- st_transform(data, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs")
data
ggplot() +
geom_buffer_cn(
mainland_dist = 10000
) +
theme_minimal()
ggplot() +
geom_buffer_cn(
mainland_dist = 10000
) +
geom_boundary_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn(
mainland_dist = 30000
) +
geom_boundary_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn(
mainland_dist = 30000
) +
geom_boundary_cn()+
theme_minimal()
#' Plot Buffered Layers for China's Boundary
#'
#' A ggplot2 layer for creating buffered areas around China's boundary, including
#' both the mainland boundary and the ten-segment line. Generates a buffer with specified distances
#' around each boundary.
#'
#' @param mainland_dist Numeric. The buffer distance (in meters) for the mainland boundary.
#' @param ten_line_dist Numeric. The buffer distance (in meters) for the ten-segment line.
#'   If not specified, it defaults to the same value as `mainland_dist`.
#' @param crs Character. The coordinate reference system (CRS) for the projection.
#'   Defaults to "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs".
#'   Users can specify other CRS strings to customize the projection (e.g., "+proj=merc" for Mercator).
#' @param color Character. The color for the border of the buffer area. Default is `NA` (transparent).
#' @param fill Character. The fill color for the buffer area. Default is `"#D2D5EB"`.
#' @param ... Additional parameters passed to `geom_sf`.
#'
#' @return A ggplot2 layer displaying buffered areas around China's boundary,
#'   with customizable buffer distances for the mainland boundary and the ten-segment line,
#'   using the specified projection.
#'
#' @examples
#' \dontrun{
#' # Plot buffers using geom_buffer_cn with specified distances for mainland and ten-segment line
#' ggplot() +
#'   geom_buffer_cn(
#'     mainland_dist = 10000
#'   ) +
#'   theme_minimal()
#'
#' # Plot with a custom projection (Mercator) and different ten-segment line distance
#' ggplot() +
#'   geom_buffer_cn(
#'     mainland_dist = 10000,
#'     ten_line_dist = 20000,
#'     fill="#BBB3D8",
#'     crs = "+proj=merc"
#'   ) +
#'   theme_minimal()
#' }
#' @import ggplot2
#' @importFrom sf st_read st_transform st_cast
#' @export
geom_buffer_cn <- function(mainland_dist = 20000, ten_line_dist = NULL, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs", color = NA, fill = "#D2D5EB", ...) {
library(sf)
# If ten_line_dist is NULL, set it equal to mainland_dist
if (is.null(ten_line_dist)) {
ten_line_dist <- mainland_dist
}
# Load the default buffer data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
# Apply the specified or default projection
data <- st_transform(data, crs = crs)
# Create buffer for mainland boundary
mainland_buffer <- st_buffer(data[data$name == "mainland", ], dist = mainland_dist)
# Split the ten-segment line into individual LINESTRINGs and remove warning by omitting name attributes
ten_segment_lines <- st_cast(data[data$name == "ten_segment_line", ], "LINESTRING", warn = FALSE)
# Set unique IDs for each LINESTRING to avoid warning
ten_segment_lines <- ten_segment_lines %>%
dplyr::mutate(id = row_number(), name = "ten_segment_line")
# Apply buffer to each LINESTRING in the ten-segment line
ten_segment_buffers <- lapply(seq_len(nrow(ten_segment_lines)), function(i) {
st_buffer(ten_segment_lines[i, , drop = FALSE], dist = ten_line_dist, singleSide = TRUE)
})
# Combine buffers into an sf object
ten_segment_buffers <- do.call(rbind, ten_segment_buffers)
# Manually set name attribute to avoid warnings
ten_segment_buffers$name <- "ten_segment_buffer"
# Convert mainland buffer to sf with name attribute
mainland_buffer <- st_as_sf(data.frame(name = "mainland_buffer", geometry = st_geometry(mainland_buffer)))
# Combine mainland and ten-segment buffers
buffer_data <- rbind(mainland_buffer, ten_segment_buffers)
# Return ggplot2 layer
geom_sf(data = buffer_data, color = color, fill = fill, ...)
}
ggplot() +
geom_buffer_cn(
mainland_dist = 30000
) +
geom_boundary_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn(
mainland_dist = 30000
) +
geom_boundary_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn(
mainland_dist = 30000
) +
geom_boundary_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn(
mainland_dist = 30000
) +
geom_boundary_cn()+
theme_minimal()
# Load the default buffer data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
data
# Split the ten-segment line into individual LINESTRINGs
ten_segment_lines <- st_cast(data[data$name == "ten_segment_line", ], "LINESTRING")
ten_segment_lines
plot(ten_segment_lines)
View(ten_segment_lines)
ggplot() +
geom_buffer_cn(
mainland_dist = 30000
) +
geom_boundary_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn(
mainland_dist = 30000
) +
geom_boundary_cn()+
theme_minimal()
# Load the boundary data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
st_write(data, "D:/权威地图/天地图准确拆分/boundary.shp")
# Load the boundary data
file_path <- system.file("extdata", "buffer_line.shp", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
# Load the boundary data
file_path <- system.file("extdata", "boundary.shp", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
b<- st_read("D:/权威地图/天地图准确拆分/boundary.shp")
b
#载入查看
boundary <- st_read("D:/权威地图/天地图准确拆分/buffer_line.geojson")
#载入查看
st_write(b,"D:/权威地图/天地图准确拆分/buffer_line.geojson")
# Load the boundary data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
data
# Load the boundary data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
data
boundary
b
#载入查看
st_write(b,"D:/权威地图/天地图准确拆分/buffer_line.geojson")
#载入查看
st_write(b,"D:/权威地图/天地图准确拆分/buffer_line.geojson")
# Load the boundary data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
data
b
b
st_write(b, "path_to_output.geojson")
# Load the boundary data
file_path <- system.file("extdata", "path_to_output.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
# Load the boundary data
file_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
data <- st_read(file_path, quiet = TRUE)
data
ggplot() +
geom_buffer_cn(
mainland_dist = 30000
) +
geom_boundary_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000, fill = "#BBB3D8") +
geom_mapcn(fill = "white") +
geom_boundary_cn() +
theme_minimal()
?geom_vege_raster
ggplot() +
geom_vege_raster() +
theme_minimal()
ggplot() +
geom_vege_raster() +
geom_boundary_cn()+
geom_buffer_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn()+
geom_vege_raster() +
geom_boundary_cn()+
theme_minimal()
ggplot() +
geom_buffer_cn()+
geom_vege_raster() +
geom_boundary_cn()+
theme_classic()
install.packages("pkgdown")
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
usethis::use_pkgdown_()
usethis::use_pkgdown()
usethis::use_pkgdown()
use_pkgdowns()
library(pkgdown)
use_pkgdowns()
use_pkgdown()
?use_pkgdown()
use_github_pages()
