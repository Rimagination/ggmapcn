#'
#' A ggplot2 layer for creating buffered areas around China's mainland boundary
#' and ten-dash line. The function generates a buffer around the mainland boundary
#' with a specified distance and a buffer around the ten-dash line with half that distance.
#' Users can also specify a custom projection for the buffer display.
#'
#' @param file_path A character string specifying the file path of the geojson file
#' containing both the mainland boundary and the ten-dash line. The file should have
#' a column `name` with values "mainland_line" for the mainland boundary and "10_dashline"
#' for the ten-dash line. You can use `buffer_path <- system.file("extdata", "buffer_line.geojson",
#' package = "ggmapcn")` to get the path to the file included in the package.
#' @param mainland_dist Numeric. The buffer distance (in meters) for the mainland boundary.
#' The buffer distance for the ten-dash line will be half of this value.
#' @param crs Character. The coordinate reference system (CRS) for the projection.
#' Defaults to "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs".
#' Users can specify other CRS strings to customize the projection (e.g., "+proj=merc" for Mercator).
#' @param color Character. The color for the border of the buffer area. Default is `NA` (transparent).
#' @param fill Character. The fill color for the buffer area. Default is `"lightgrey"`.
#' @param ... Additional parameters passed to `geom_sf`.
#'
#' @return A ggplot2 layer displaying buffered areas around China's mainland boundary
#' and ten-dash line, with ten-dash line buffer at half the mainland buffer distance,
#' using the specified projection.
#'
#' @examples
#' \dontrun{
#' # Get the path to the buffer file included in the package
#' buffer_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
#'
#' # Plot the buffers using geom_mapbuffer with default projection
#' ggplot() +
#'   geom_mapbuffer(
#'     file_path = buffer_path,
#'     mainland_dist = 10000
#'   ) +
#'   theme_minimal()
#'
#' # Plot with custom projection (Mercator)
#' ggplot() +
#'   geom_mapbuffer(
#'     file_path = buffer_path,
#'     mainland_dist = 10000,
#'     crs = "+proj=merc"
#'   ) +
#'   theme_minimal()
#' }
#'
#' @export
geom_mapbuffer <- function(file_path, mainland_dist = 10000, crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs", color = NA, fill = "lightgrey", ...) {
# 读取大陆边界和10段线数据
buffer <- st_read(file_path, quiet = TRUE)
# 设置用户定义的投影，确保一致
buffer <- st_transform(buffer, crs = crs)
# 创建缓冲区，区分大陆边界和10段线
mainland_buffer <- st_buffer(buffer[buffer$name == "mainland_line", ], dist = mainland_dist)
dashline_buffer <- st_buffer(buffer[buffer$name == "10_dashline", ], dist = mainland_dist / 2)
# 将缓冲区转换为 sf 对象，确保几何列存在
mainland_buffer <- st_as_sf(data.frame(name = "mainland_buffer", geometry = st_geometry(mainland_buffer)))
dashline_buffer <- st_as_sf(data.frame(name = "dashline_buffer", geometry = st_geometry(dashline_buffer)))
# 将缓冲区数据合并成一个 sf 对象
buffer_data <- rbind(mainland_buffer, dashline_buffer)
# 返回 ggplot2 图层
geom_sf(data = buffer_data, color = color, fill = fill, ...)
}
ggplot() +
geom_mapbuffer(
file_path = buffer_path,
mainland_dist = 10000
) +
theme_minimal()
ggplot() +
geom_mapbuffer(
file_path = buffer_path,
mainland_dist = 20000
) +
theme_minimal()
?geom_mapcn
ggplot() + geom_mapcn()
ggplot() +
geom_mapcn()+
geom_mapbuffer(
file_path = buffer_path,
mainland_dist = 20000
) +
theme_minimal()
ggplot() +
geom_mapbuffer(
file_path = buffer_path,
mainland_dist = 20000
) +
geom_mapcn()+
theme_minimal()
ggplot() +
geom_mapbuffer(
file_path = buffer_path,
mainland_dist = 20000
) +
geom_mapcn()+
theme_minimal()
?geom_mapbuffer()
# Get the path to the buffer file included in the package
buffer_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
# Plot buffers using geom_mapbuffer with default data and projection
ggplot() +
geom_mapbuffer(
data = st_read(buffer_path, quiet = TRUE),
mainland_dist = 10000
) +
theme_minimal()
# Get the path to the buffer file included in the package
buffer_path <- system.file("extdata", "buffer_line.geojson", package = "ggmapcn")
# Plot buffers using geom_mapbuffer with default data and projection
ggplot() +
geom_mapbuffer(
data = buffer_path,
mainland_dist = 10000
) +
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 10000
) +
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 10000
) +
geom_mapcn()+
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 20000
) +
geom_mapcn()+
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 10000,fill = "grey"
) +
geom_mapbuffer(
mainland_dist = 20000
) +
geom_mapcn()+
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 20000,fill = "grey"
) +
geom_mapbuffer(
mainland_dist = 30000
) +
geom_mapcn()+
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 20000,fill = "red"
) +
geom_mapbuffer(
mainland_dist = 30000
) +
geom_mapcn()+
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 30000
) +
geom_mapbuffer(
mainland_dist = 20000,fill = "red"
) +
geom_mapcn()+
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 20000
) +
geom_mapbuffer(
mainland_dist = 10000,fill = "grey"
) +
geom_mapcn()+
theme_minimal()
?ggplot
ggplot() +
geom_mapbuffer(
mainland_dist = 20000
) +
geom_mapbuffer(
mainland_dist = 10000,fill = "grey"
) +
geom_mapcn()+
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 20000
) +
geom_mapbuffer(
mainland_dist = 10000,fill = "grey"
) +
geom_mapcn()+
theme_minimal()
ggplot() +
geom_mapbuffer(
mainland_dist = 20000
) +
geom_mapbuffer(
mainland_dist = 10000,fill = "grey"
) +
geom_mapcn()+
theme_minimal()
?geom_mapcn()
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china_data <- st_read(china_path, quiet = TRUE)
china_data
ggplot() +
geom_mapbuffer(
mainland_dist = 40000,fill = "#BBB2D8"
) +
geom_mapbuffer(
mainland_dist = 20000
) +
geom_mapcn()+
theme_minimal()
library(sf)
# 读取 China_sheng.geojson 文件
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china <- st_read(china_path, quiet = TRUE)
# 合并所有省份为一个整体并提取外边界
china_union <- st_union(china)      # 合并所有省份
# 修复几何图形并合并省份为一个整体
china <- st_make_valid(china)       # 修复几何图形
china_union <- st_union(china)      # 合并所有省份
china_boundary <- st_boundary(china_union)  # 提取外边界线
# 绘制结果
plot(china_boundary, col = "blue", main = "China Mainland Boundary")
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china <- st_read(china_path, quiet = TRUE)
plot(china)
china
# 读取 China_sheng.geojson 文件
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china <- st_read(china_path, quiet = TRUE)
# 只保留几何形状
china_geometry <- st_geometry(china)       # 提取几何信息
china_shape <- st_as_sf(data.frame(geometry = china_geometry))  # 转换为 sf 对象
# 绘制结果
plot(china_shape, col = "lightblue", main = "China Shape without Attributes")
# 合并所有省份为一个整体，并提取外边界
china_union <- st_union(china)               # 合并为单个多边形
library(sf)
# 读取 China_sheng.geojson 文件
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china <- st_read(china_path, quiet = TRUE)
# 修复无效的几何
china_valid <- st_make_valid(china)
# 合并所有省份为一个整体并提取外边界
china_union <- st_union(china_valid)  # 合并为单个多边形
china_boundary <- st_cast(china_union, "LINESTRING")  # 转换为线条
# 绘制结果
plot(china_boundary, col = "blue", main = "China Outer Boundary Only")
# 读取 China_sheng.geojson 文件
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china <- st_read(china_path, quiet = TRUE)
# 只保留几何形状
china_geometry <- st_geometry(china)       # 提取几何信息
china_shape <- st_as_sf(data.frame(geometry = china_geometry))  # 转换为 sf 对象
plot(china_shape)
# 将面元素转换为线元素
china_lines <- st_cast(china_shape, "MULTILINESTRING")
plot(china_lines)
# 将转换后的 sf 对象保存为 Shapefile 文件
st_write(china_lines, "china_lines.shp", driver = "ESRI Shapefile")
# 合并所有线段为一个整体并提取最外边界
china_outer_boundary <- st_union(china_lines)     # 将所有线段合并成一个整体
china_outer_boundary <- st_cast(china_outer_boundary, "MULTILINESTRING") # 确保为多线段格式
# 绘制最外边界
plot(china_outer_boundary, col = "red", main = "China Outer Boundary")
# 绘制最外边界
plot(china_outer_boundary, col = "red", main = "China Outer Boundary")
# 读取 China_sheng.geojson 文件
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china <- st_read(china_path, quiet = TRUE)
# 将所有省份合并为一个整体多边形，然后提取外边界
china_union <- st_union(china)                   # 合并为一个整体多边形
library(sf)
# 读取 China_sheng.geojson 文件
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china <- st_read(china_path, quiet = TRUE)
# 修复几何形状
china_valid <- st_make_valid(china)
# 合并所有省份为一个整体多边形并提取外边界
china_union <- st_union(china_valid)                   # 合并为一个整体多边形
china_outer_boundary <- st_cast(st_boundary(china_union), "LINESTRING")  # 提取外边界
# 绘制结果
plot(china_outer_boundary, col = "red", main = "China Outer Boundary Only")
sea <- st_read("data/sea2.shp", quiet = TRUE)
plot(sea)
sea
# 只保留 name 属性，并合并所有线段成一个
sea_simplified <- sea %>%
select(name) %>%          # 只保留 name 列
group_by(name) %>%        # 根据 name 分组
summarise(do_union = TRUE)  # 合并所有线段
# 绘制结果
plot(sea_simplified, col = "blue", main = "Merged Sea Boundary")
# 保存结果为 GeoJSON 文件
st_write(sea_simplified, "coastline.geojson", driver = "GeoJSON")
mainland <- st_read("data/main2.shp", quiet = TRUE)
plot(mainland)
mainland
sea_simplified
要修改 sf 对象中 name 属性的值，可以直接使用 mutate() 函数或通过基础 R 语法进行修改。以下是实现代码：
sea_simplified <- sea_simplified %>%
mutate(name = "coastline")
sea_simplified
# 保存结果为 GeoJSON 文件
st_write(sea_simplified, "coastline.geojson", driver = "GeoJSON")
mainland
mainland <- mainland %>% mutate(name = "mainland")
# 只保留 name 属性，并合并所有线段成一个
mainland_simplified <- sea %>%
select(name) %>%          # 只保留 name 列
group_by(name) %>%        # 根据 name 分组
summarise(do_union = TRUE)  # 合并所有线段
# 绘制结果
plot(mainland_simplified, col = "blue", main = "Merged mainland Boundary")
# 只保留 name 属性，并合并所有线段成一个
mainland_simplified <- mainland %>%
select(name) %>%          # 只保留 name 列
group_by(name) %>%        # 根据 name 分组
summarise(do_union = TRUE)  # 合并所有线段
# 绘制结果
plot(mainland_simplified, col = "blue", main = "Merged mainland Boundary")
mainland
sea_simplified
mainland_simplified
# 保存结果为 GeoJSON 文件
st_write(mainland_simplified, "mainland.geojson", driver = "GeoJSON")
mainland <- st_read("inst/extdata/mainland.geojson", quiet = TRUE)
library(sf)
mainland <- st_read("inst/extdata/mainland.geojson", quiet = TRUE)
coastline <- st_read("inst/extdata/coastline.geojson", quiet = TRUE)
boundary <- bind_rows(mainland, coastline)
library(sf)
library(dplyr)
boundary <- bind_rows(mainland, coastline)
plot(boundary)
boundary
st_write(boundary, "boundary.geojson", driver = "GeoJSON")
?geom_mapboundary
?geom_boundary_cn
ggplot() +
geom_boundary_cn(
mainland_color = "black",
mainland_size = 0.8,
coastline_color = "blue",
coastline_size = 0.5
) +
theme_minimal()
usethis::use_package("sf", "Imports")
usethis::use_package("ggplot2", "Imports")
ggplot() +
geom_boundary_cn(
mainland_color = "black",
mainland_size = 0.8,
coastline_color = "blue",
coastline_size = 0.5
) +
theme_minimal()
ggplot() +
geom_boundary_cn(
mainland_color = "black",
mainland_size = 0.8,
coastline_color = "blue",
coastline_size = 0.5
) +
theme_minimal()
?geom_boundary_cn
ggplot() +
geom_boundary_cn(
mainland_color = "black",
mainland_size = 0.8,
coastline_color = "blue",
coastline_size = 0.5
) +
theme_minimal()
ggplot2::ggplot() +
geom_boundary_cn(
mainland_color = "black",
mainland_size = 0.8,
coastline_color = "blue",
coastline_size = 0.5
) +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_boundary_cn(
mainland_color = "black",
mainland_size = 0.8,
coastline_color = "skyblue",
coastline_size = 0.5
) +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_mapcn()+
geom_boundary_cn() +
ggplot2::theme_minimal()
?geom_buffer_cn
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000,fill="#BBB3D8") +
geom_buffer_cn(mainland_dist = 20000) +
geom_mapcn()+
geom_boundary_cn() +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000,fill="#BBB3D8") +
geom_mapcn()+
geom_boundary_cn() +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000,fill="#BBB3D8") +
geom_buffer_cn(mainland_dist = 0,fill="black") +
geom_mapcn()+
geom_boundary_cn() +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000,fill="#BBB3D8") +
geom_buffer_cn(mainland_dist = 10000,fill="black") +
geom_mapcn()+
geom_boundary_cn() +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000,fill="#BBB3D8") +
geom_buffer_cn(mainland_dist = 0,fill="black") +
geom_mapcn(fill=NA)+
geom_boundary_cn() +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000,fill="#BBB3D8") +
geom_mapcn(fill=NA)+
geom_boundary_cn() +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000, fill = "#BBB3D8") +
geom_buffer_cn(mainland_dist = 0, fill = "black") +
geom_mapcn(aes(fill = name)) +  # 使用省份名称或其他变量来区分填色
geom_boundary_cn() +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000, fill = "#BBB3D8") +
geom_mapcn(aes(fill = name)) +  # 使用省份名称或其他变量来区分填色
geom_boundary_cn() +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000, fill = "#BBB3D8") +
geom_mapcn(fill = name) +  # 使用省份名称或其他变量来区分填色
geom_boundary_cn() +
ggplot2::theme_minimal()
?geom_mapcn
china_path <- system.file("extdata", "China_sheng.geojson", package = "ggmapcn")
china_data <- st_read(china_path, quiet = TRUE)
ggplot2::ggplot() + geom_mapcn(data = china_data, crs = "+proj=merc", size = 0.7)
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000, fill = "#BBB3D8") +
geom_mapcn() +
geom_boundary_cn() +
ggplot2::theme_minimal()
ggplot2::ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000, fill = "#BBB3D8") +
geom_mapcn(fill = "white") +
geom_boundary_cn() +
ggplot2::theme_minimal()
usethis::use_readme_rmd()
ggplot() +
geom_mapcn(crs = "+proj=aea +lat_1=25 +lat_2=47 +lat_0=0 +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs", color = "black", fill = "white", size = 0.7) +
theme_minimal()
ggplot2::ggplot() +
geom_mapcn(crs = "+proj=aea +lat_1=25 +lat_2=47 +lat_0=0 +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs", color = "black", fill = "white", size = 0.7) +
theme_minimal()
library(ggmapcn)
ggplot2::ggplot() +
geom_mapcn(crs = "+proj=aea +lat_1=25 +lat_2=47 +lat_0=0 +lon_0=105 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs", color = "black", fill = "white", size = 0.7) +
theme_minimal()
ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000, fill = "#BBB3D8") +
geom_mapcn(fill = NA) +
geom_boundary_cn(
mainland_color = "black",
mainland_size = 0.8,
coastline_color = "blue",
coastline_size = 0.5
) +
theme_minimal()
ggplot() +
geom_buffer_cn(mainland_dist = 40000) +
geom_buffer_cn(mainland_dist = 20000, fill = "#BBB3D8") +
geom_mapcn(fill = "white") +
geom_boundary_cn(
mainland_color = "black",
mainland_size = 0.5,
coastline_color = "skyblue",
coastline_size = 0.5
) +
theme_minimal()
