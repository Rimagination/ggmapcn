ggplot() +
geom_tile(data = vege_raster_df, aes(x = x, y = y, fill = value)) +
scale_fill_manual(values = colors, na.value = 'transparent') +
theme_minimal() +
labs(fill = "Vegetation Type")
# 去除重复的栅格值，只保留唯一值
unique_vege_codes <- vege_codes %>%
distinct(value, name, color, .keep_all = TRUE)
library(dplyr)
library(terra)
# 去除重复的栅格值，只保留唯一值
unique_vege_codes <- vege_codes %>%
distinct(value, name, color, .keep_all = TRUE)
names(vege_codes)
# 去除重复的栅格值，只保留唯一值
unique_vege_codes <- vege_codes %>%
distinct(code, `vegetation type group`, col, .keep_all = TRUE)
View(unique_vege_codes)
# 手动创建数据框
vege_codes <- data.frame(
code = c(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2),
vegetation_type_group = c("Non-vegetated", "Needleleaf forest", "Broadleaf forest", "Scrub",
"Desert", "Steppe", "Grassland", "Meadow", "Swamp",
"Alpine vegetation", "Cultivated vegetation",
"Needleleaf and broadleaf mixed forest"),
col = c("#8D99B3", "#97B555", "#9ACE30", "#2EC6C9", "#E5CE0E", "#5BB1ED",
"#6494EF", "#7AB9CB", "#D97A80", "#B87701", "#FEB780", "#34BF36")
)
# 定义颜色映射（以 code 为键）
colors <- setNames(vege_codes$col, vege_codes$code)
colors
ggplot() +
geom_spatraster(data = vege_raster) +  # 确保 vege_raster 已加载
scale_fill_manual(values = colors, na.value = 'transparent') +
theme_minimal() +
labs(fill = "Vegetation Type")
library(terra)
library(dplyr)
# 手动创建表格数据，并将 vegetation_type_group 列重命名为 type
cls <- data.frame(
code = c(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2),
type = c("Non-vegetated", "Needleleaf forest", "Broadleaf forest", "Scrub",
"Desert", "Steppe", "Grassland", "Meadow", "Swamp",
"Alpine vegetation", "Cultivated vegetation",
"Needleleaf and broadleaf mixed forest"),
col = c("#8D99B3", "#97B555", "#9ACE30", "#2EC6C9", "#E5CE0E", "#5BB1ED",
"#6494EF", "#7AB9CB", "#D97A80", "#B87701", "#FEB780", "#34BF36")
)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_WGS84.tif")
# 将 cls 设置为 vege_raster 的级别
levels(vege_raster) <- cls %>% select(code, type) %>% rename(value = code, cover = type)
# 检查级别是否已成功设置
print(levels(vege_raster))
library(terra)
library(dplyr)
# 手动创建表格数据，并将 vegetation_type_group 列重命名为 type
cls <- data.frame(
code = c(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2),
type = c("Non-vegetated", "Needleleaf forest", "Broadleaf forest", "Scrub",
"Desert", "Steppe", "Grassland", "Meadow", "Swamp",
"Alpine vegetation", "Cultivated vegetation",
"Needleleaf and broadleaf mixed forest"),
col = c("#8D99B3", "#97B555", "#9ACE30", "#2EC6C9", "#E5CE0E", "#5BB1ED",
"#6494EF", "#7AB9CB", "#D97A80", "#B87701", "#FEB780", "#34BF36")
)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_WGS84.tif")
# 将 cls 设置为 vege_raster 的级别
levels(vege_raster) <- cls %>% select(code, type) %>% rename(value = code, cover = type)
# 检查级别是否已成功设置
print(levels(vege_raster))
library(terra)
library(dplyr)
# 手动创建表格数据
cls <- data.frame(
code = c(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2),
type = c("Non-vegetated", "Needleleaf forest", "Broadleaf forest", "Scrub",
"Desert", "Steppe", "Grassland", "Meadow", "Swamp",
"Alpine vegetation", "Cultivated vegetation",
"Needleleaf and broadleaf mixed forest"),
col = c("#8D99B3", "#97B555", "#9ACE30", "#2EC6C9", "#E5CE0E", "#5BB1ED",
"#6494EF", "#7AB9CB", "#D97A80", "#B87701", "#FEB780", "#34BF36")
)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_WGS84.tif")
# 直接将 cls 设置为 vege_raster 的级别，不重命名列
levels(vege_raster) <- cls %>% select(code, type)
# 检查级别是否已成功设置
print(levels(vege_raster))
plot(vege_raster)
# 创建包含 code 和 color 的数据框
coltb <- data.frame(
value = c(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2),
col = c("#8D99B3", "#97B555", "#9ACE30", "#2EC6C9", "#E5CE0E", "#5BB1ED",
"#6494EF", "#7AB9CB", "#D97A80", "#B87701", "#FEB780", "#34BF36")
)
# 设置 coltb 为 vege_raster 栅格数据集的颜色表
coltab(vege_raster) <- coltb
# 检查颜色表是否已成功设置
print(coltab(glass))
# 检查颜色表是否已成功设置
print(coltab(vege_raster))
plot(vege_raster)
p1 <- ggplot()+
geom_spatraster(data = vege_raster, use_coltab = T)+ #use_coltab决定是否使用栅格数据的coltab颜色属性
theme_minimal() #更换主题
p1
# 读取Excel文件
vege_codes <- read_excel("D:/权威地图/Vege_1KM/vege_code.xlsx")
# 去除重复值，只保留唯一值
unique_vege_codes <- vege_codes %>%
distinct(code, `vegetation type group`, col, .keep_all = TRUE)
View(unique_vege_codes)
?geom_veg_raster
# Add vegetation raster of China to a ggplot
ggplot() + geom_veg_raster()
# Add vegetation raster of China to a ggplot
ggplot() + geom_veg_raster() + geom_mapcn()
# Add vegetation raster of China to a ggplot
ggplot() + geom_veg_raster() + geom_boudary_cn()
# Add vegetation raster of China to a ggplot
ggplot() + geom_veg_raster() + geom_boundary_cn()
# Add vegetation raster of China to a ggplot
ggplot() +
geom_veg_raster() +
geom_boundary_cn() +
theme_minimal()
# Add vegetation raster of China to a ggplot
ggplot() +
geom_veg_raster() +
geom_boundary_cn(coastline_color = "darkblue") +
theme_minimal()
ggplot() +
geom_veg_raster() +
labs(fill = "Vegetation type group") +  # 修改图例标题
theme_minimal()
# Add vegetation raster of China to a ggplot
ggplot() +
geom_veg_raster() +
geom_boundary_cn(coastline_color = "darkblue") +
theme_minimal()
# Add vegetation raster of China to a ggplot
ggplot() +
geom_veg_raster() +
geom_boundary_cn(coastline_color = "darkblue") +
labs(fill = "Vegetation type group") +
theme_minimal()
library(terra)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km.tif")
plot(vege_raster)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/veg_1km_WGS84.tif")
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_WGS84.tif")
plot(vege_raster)
color_table <- data.frame(
code = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
type = c("Non-vegetated", "Needleleaf forest", "Needleleaf and broadleaf mixed forest",
"Broadleaf forest", "Scrub", "Desert", "Steppe", "Grassland",
"Meadow", "Swamp", "Alpine vegetation", "Cultivated vegetation"),
col = c("#8D99B3", "#97B555", "#34BF36", "#9ACE30", "#2EC6C9", "#E5CE0E",
"#5BB1ED", "#6494EF", "#7AB9CB", "#D97A80", "#B87701", "#FEB780")
)
# Set levels and color table for the raster
levels(vege_raster) <- color_table[, c("code", "type")]
coltab(vege_raster) <- color_table[, c("code", "col")]
geom_spatraster(data = vege_raster, maxcell = maxcell, use_coltab = use_coltab, na.rm = na.rm, ...)
ggplot()+geom_spatraster(data = vege_raster, maxcell = maxcell, use_coltab = use_coltab, na.rm = na.rm)
ggplot()+geom_spatraster(data = vege_raster, use_coltab = use_coltab, na.rm = na.rm)
ggplot()+geom_spatraster(data = vege_raster, use_coltab = use_coltab)
ggplot()+geom_spatraster(data = vege_raster)
?geom_spatraster
ggplot() +
geom_spatraster(data = temp_rast, aes(fill = tavg_04)) +
# You can use coord_sf
coord_sf(crs = 3857) +
scale_fill_grass_c(palette = "celsius")
# Avg temperature on spring in Castille and Leon (Spain)
file_path <- system.file("extdata/cyl_temp.tif", package = "tidyterra")
ggplot() +
geom_spatraster(data = temp_rast, aes(fill = tavg_04)) +
# You can use coord_sf
coord_sf(crs = 3857) +
scale_fill_grass_c(palette = "celsius")
# Avg temperature on spring in Castille and Leon (Spain)
file_path <- system.file("extdata/cyl_temp.tif", package = "tidyterra")
library(terra)
temp_rast <- rast(file_path)
library(ggplot2)
# Display a single layer
names(temp_rast)
ggplot() +
geom_spatraster(data = temp_rast, aes(fill = tavg_04)) +
# You can use coord_sf
coord_sf(crs = 3857) +
scale_fill_grass_c(palette = "celsius")
ggplot()+geom_spatraster(data = vege_raster,maxcell=5e+06)
ggplot()+geom_spatraster(data = vege_raster,maxcell=5e+07)
vege_raster
4023*6816
5e+05
ggplot()+geom_spatraster(data = vege_raster,maxcell=5e+8)
plot(vege_raster)
# 加载栅格数据
veg_path <- system.file("extdata", "veg_1km_WGS84.tif", package = "ggmapcn")
vege_raster <- rast(veg_path)
# 将栅格数据转换为 data frame
vege_df <- as.data.frame(vege_raster, xy = TRUE, na.rm = TRUE)  # xy参数保留坐标
# 绘图
ggplot(vege_df, aes(x = x, y = y, fill = veg_1km_WGS84)) +
geom_tile() +
labs(fill = "Vegetation Type") +
theme_minimal()
rlang::last_trace()
# 加载栅格数据
veg_path <- system.file("extdata", "veg_1km_WGS84.tif", package = "ggmapcn")
vege_raster <- rast(veg_path)
# 将栅格数据转换为 data frame
vege_df <- as.data.frame(vege_raster, xy = TRUE, na.rm = TRUE)  # xy参数保留坐标
# 绘图
ggplot(vege_df, aes(x = x, y = y, fill = veg_1km_WGS84)) +
geom_tile() +
labs(fill = "Vegetation Type") +
theme_minimal()
?geom_spatraster
ggplot()+geom_spatraster(data = vege_raster,maxcell=5e+10)
?geom_veg_raster
ggplot() +
geom_veg_raster()
# 加载包
library(terra)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_projected.tif")
china_vector <- vect(system.file("extdata", "China_sheng.geojson", package = "ggmapcn"))
# 将栅格数据重投影到EPSG:4326
vege_raster_4326 <- project(vege_raster, "EPSG:4326")
# 使用mask函数执行剪裁操作
vege_clipped <- crop(vege_raster_4326, china_vector)
plot(vege_clipped)
# 将裁剪后的数据转换为 data frame 并绘图
vege_df <- as.data.frame(vege_raster_cropped, xy = TRUE, na.rm = TRUE)
vege_df <- as.data.frame(vege_clipped, xy = TRUE, na.rm = TRUE)
View(vege_df)
geom_veg_raster <- function(color_table = NULL,
crs = "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs",
na.rm = FALSE,
...) {
library(ggplot2)
library(terra)
# Load vegetation raster of China from package's extdata directory
veg_path <- system.file("extdata", "veg_1km_WGS84.tif", package = "ggmapcn")
vege_raster <- rast(veg_path)
# Default color table if none provided, following recommended classification for China
if (is.null(color_table)) {
color_table <- data.frame(
code = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
type = c("Non-vegetated", "Needleleaf forest", "Needleleaf and broadleaf mixed forest",
"Broadleaf forest", "Scrub", "Desert", "Steppe", "Grassland",
"Meadow", "Swamp", "Alpine vegetation", "Cultivated vegetation"),
col = c("#8D99B3", "#97B555", "#34BF36", "#9ACE30", "#2EC6C9", "#E5CE0E",
"#5BB1ED", "#6494EF", "#7AB9CB", "#D97A80", "#B87701", "#FEB780")
)
}
# Set levels and color table for the raster
levels(vege_raster) <- color_table[, c("code", "type")]
coltab(vege_raster) <- color_table[, c("code", "col")]
# Apply CRS transformation if specified
vege_raster <- terra::project(vege_raster, crs)
# Convert raster to data frame for ggplot2
vege_df <- as.data.frame(vege_raster, xy = TRUE, na.rm = na.rm)
names(vege_df)[3] <- "value"  # 重命名值列为 'value' 以便映射
# Map color table values
vege_df$fill <- factor(vege_df$value, levels = color_table$code, labels = color_table$type)
# Return ggplot2 layer using geom_raster
geom_raster(data = vege_df, aes(x = x, y = y, fill = fill), ...) +
scale_fill_manual(values = color_table$col, breaks = color_table$type, labels = color_table$type)
}
ggplot() +
geom_veg_raster() +
labs(fill = "Vegetation Type") +
theme_minimal()
# 加载包
library(terra)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_projected.tif")
vege_raster
china_vector <- vect(system.file("extdata", "China_sheng.geojson", package = "ggmapcn"))
# 使用mask函数执行剪裁操作
vege_clipped <- crop(vege_raster_4326, china_vector)
# 查看剪裁后的栅格数据
plot(vege_clipped)
# 加载包
library(terra)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_projected.tif")
china_vector <- vect(system.file("extdata", "China_sheng.geojson", package = "ggmapcn"))
# 使用mask函数执行剪裁操作
vege_clipped <- crop(vege_raster_4326, china_vector)
# 使用mask函数执行剪裁操作
vege_clipped <- crop(vege_raster, china_vector)
# 查看剪裁后的栅格数据
plot(vege_clipped)
# 使用mask函数执行剪裁操作
vege_clipped <- mask(vege_raster, china_vector)
# 查看剪裁后的栅格数据
plot(vege_clipped)
# 使用mask函数执行剪裁操作
vege_masked <- mask(vege_raster, china_vector)
# 使用mask函数执行剪裁操作
vege_masked <- mask(vege_raster, china_vector)
# 使用crop函数执行剪裁操作
vege_croped <- crop(vege_masked, china_vector)
# 查看剪裁后的栅格数据
plot(vege_croped)
# 使用mask函数执行剪裁操作
vege_masked <- mask(vege_raster, china_vector)
# 使用crop函数执行剪裁操作
vege_cropped <- crop(vege_masked, china_vector)
# 查看剪裁后的栅格数据
plot(vege_cropped)
# 将剪裁后的栅格数据保存到文件
writeRaster(vege_cropped, "D:/权威地图/Vege_1KM/vege_1km_WGS84.tif", overwrite = TRUE)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_projected.tif")
china_vector <- vect(system.file("extdata", "China_sheng.geojson", package = "ggmapcn"))
# 先使用crop进行裁剪，后续的mask操作避免产生小数
vege_cropped <- crop(vege_raster, china_vector, snap = "out")  # snap参数确保裁剪边界与分类数据对齐
vege_masked <- mask(vege_cropped, china_vector)
plot(vege_masked)
# 将剪裁后的栅格数据保存到文件
writeRaster(vege_masked, "D:/权威地图/Vege_1KM/vege_1km_WGS84.tif", overwrite = TRUE)
library(dplyr)
library(terra)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_WGS84.tif")
# 手动创建表格数据
cls <- data.frame(
code = c(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 2),
type = c("Non-vegetated", "Needleleaf forest", "Broadleaf forest", "Scrub",
"Desert", "Steppe", "Grassland", "Meadow", "Swamp",
"Alpine vegetation", "Cultivated vegetation",
"Needleleaf and broadleaf mixed forest"),
col = c("#8D99B3", "#97B555", "#9ACE30", "#2EC6C9", "#E5CE0E", "#5BB1ED",
"#6494EF", "#7AB9CB", "#D97A80", "#B87701", "#FEB780", "#34BF36")
)
# 加载已经剪裁好的植被栅格数据
veg_path <- system.file("extdata", "veg_1km_WGS84.tif", package = "ggmapcn")
vege_raster <- rast(veg_path)
# 将栅格数据转换为数据框格式
vege_df <- as.data.frame(vege_raster, xy = TRUE, na.rm = TRUE)
colnames(vege_df)[3] <- "value"  # 确保栅格值列名为 'value'
# 创建颜色表
color_table <- data.frame(
code = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
type = c("Non-vegetated", "Needleleaf forest", "Needleleaf and broadleaf mixed forest",
"Broadleaf forest", "Scrub", "Desert", "Steppe", "Grassland",
"Meadow", "Swamp", "Alpine vegetation", "Cultivated vegetation"),
col = c("#8D99B3", "#97B555", "#34BF36", "#9ACE30", "#2EC6C9", "#E5CE0E",
"#5BB1ED", "#6494EF", "#7AB9CB", "#D97A80", "#B87701", "#FEB780")
)
# 将栅格值映射到对应类型
vege_df$value <- factor(vege_df$value, levels = color_table$code, labels = color_table$type)
# 使用 ggplot2 绘制
ggplot(vege_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_manual(values = color_table$col, name = "Vegetation Type") +
labs(x = "Longitude", y = "Latitude") +
theme_minimal()
library(ggplot2)
# 使用 ggplot2 绘制
ggplot(vege_df, aes(x = x, y = y, fill = value)) +
geom_raster() +
scale_fill_manual(values = color_table$col, name = "Vegetation Type") +
labs(x = "Longitude", y = "Latitude") +
theme_minimal()
?geom_veg_raster
ggplot() +
geom_veg_raster()
ggplot() +
geom_veg_raster()
ggplot() +geom_veg_raster()
library(ggmapcn)
ggplot() +geom_veg_raster()
?rast
library(tidyterra)
ggplot() +geom_veg_raster()
ggplot() +geom_veg_raster()
veg_path <- system.file("extdata", "veg_1km_WGS84.tif", package = "ggmapcn")
vege_raster <- terra::rast(veg_path)
ggplot() +geom_veg_raster()
ggplot() +geom_veg_raster()
veg_path <- system.file("extdata", "veg_1km_WGS84.tif", package = "ggmapcn")
vege_raster <- terra::rast(veg_path)
vege_raster
ggplot() +geom_veg_raster()
veg_path <- system.file("extdata", "veg_1km_projected.tif", package = "ggmapcn")
vege_raster <- terra::rast(veg_path)
?terra::project
ggplot() +geom_veg_raster()
?coord_sf
ggplot() +geom_veg_raster()
ggplot() +
geom_veg_raster() +
labs(fill = "Vegetation Type") +
theme_minimal()
# 提取所有栅格值
values <- values(vege_raster)
veg_path <- system.file("extdata", "veg_1km_WGS84.tif", package = "ggmapcn")
vege_raster <- rast(veg_path)
# 提取所有栅格值
values <- values(vege_raster)
View(values)
# 检查是否全部为整数
only_integers <- all(values == round(values))
# 提取栅格中的唯一值
unique_values <- unique(vege_raster)
View(unique_values)
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_projected.tif")
vege_raster
unique_values <- unique(vege_raster)
# 加载包
library(terra)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km.tif")
library(readxl)
# 读取Excel文件
vege_codes <- read_excel("D:/权威地图/Vege_1KM/vege.xlsx")
# 创建重分类矩阵，确保其格式为“原始值”和“新分类值”
reclass_matrix <- as.matrix(vege_codes[, c("Value", "Code")])
# 使用 classify() 函数进行重分类
vege_reclassified <- classify(vege_raster, reclass_matrix)
vege_reclassified
unique_values <- unique(vege_reclassified)
# 加载包
library(terra)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km.tif")
# 将栅格文件投影到目标CRS
vege_projected <- project(vege_raster, "EPSG:4326")
library(readxl)
# 读取Excel文件
vege_codes <- read_excel("D:/权威地图/Vege_1KM/vege.xlsx")
# 创建重分类矩阵，确保其格式为“原始值”和“新分类值”
reclass_matrix <- as.matrix(vege_codes[, c("Value", "Code")])
# 使用 classify() 函数进行重分类
vege_reclassified <- classify(vege_projected, reclass_matrix)
# 保存重分类后的栅格文件
writeRaster(vege_reclassified, "D:/权威地图/Vege_1KM/vege_1km_projected.tif", overwrite = TRUE)
# 加载包
library(terra)
# 读取栅格文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km_projected.tif")
china_vector <- vect(system.file("extdata", "China_sheng.geojson", package = "ggmapcn"))
# 读取文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km.tif")
china_vector <- vect(system.file("extdata", "China_sheng.geojson", package = "ggmapcn"))
vege_codes <- read_excel("D:/权威地图/Vege_1KM/vege.xlsx")
# 将栅格文件投影到目标CRS，必须先进行这一步再重分类
# 设置目标投影 (aeqd 投影)
#crs_target <- "+proj=aeqd +lat_0=35 +lon_0=105 +ellps=WGS84 +units=m +no_defs"
vege_projected <- project(vege_raster, "EPSG:4326")
# 先使用crop进行裁剪，后续的mask操作避免产生小数
vege_cropped <- crop(vege_projected, china_vector, snap = "out")  # snap参数确保裁剪边界与分类数据对齐
vege_masked <- mask(vege_cropped, china_vector)
# 创建重分类矩阵，确保其格式为“原始值”和“新分类值”
reclass_matrix <- as.matrix(vege_codes[, c("Value", "Code")])
# 使用 classify() 函数进行重分类
vege_reclassified <- classify(vege_masked, reclass_matrix)
# 检查重分类结果
print(vege_reclassified)
# 保存重分类后的栅格文件
writeRaster(vege_reclassified, "D:/权威地图/Vege_1KM/veg_1km_WGS84.tif", overwrite = TRUE)
vege_projected
# 先使用crop进行裁剪，后续的mask操作避免产生小数
vege_cropped <- crop(vege_projected, china_vector, snap = "out")  # snap参数确保裁剪边界与分类数据对齐
vege_masked <- mask(vege_cropped, china_vector)
plot(vege_masked)
vege_masked
unique(vege_masked)
# 加载包
library(terra)
library(readxl)
# 读取文件
vege_raster <- rast("D:/权威地图/Vege_1KM/vege_1km.tif")
china_vector <- vect(system.file("extdata", "China_sheng.geojson", package = "ggmapcn"))
vege_codes <- read_excel("D:/权威地图/Vege_1KM/vege.xlsx")
# 设置目标投影 (EPSG:4326)
# 使用最近邻插值（method = "near"）进行投影转换，保持整数值
vege_projected <- project(vege_raster, "EPSG:4326", method = "near")
# 裁剪栅格数据，确保裁剪边界对齐，避免小数值产生
vege_cropped <- crop(vege_projected, china_vector, snap = "out")
# 使用掩膜 (mask) 操作，确保分类值不受影响
vege_masked <- mask(vege_cropped, china_vector)
# 创建重分类矩阵，确保格式为“原始值”和“新分类值”
reclass_matrix <- as.matrix(vege_codes[, c("Value", "Code")])
# 使用 classify() 函数进行重分类，保持整数值
vege_reclassified <- classify(vege_masked, reclass_matrix)
# 检查重分类结果
print(vege_reclassified)
unique(vege_reclassified)
# 保存重分类后的栅格文件
writeRaster(vege_reclassified, "D:/权威地图/Vege_1KM/veg_1km_WGS84.tif", overwrite = TRUE)
# Load vegetation raster of China from package's extdata directory
veg_path <- system.file("extdata", "veg_1km_WGS84.tif", package = "ggmapcn")
vege_raster <- rast(veg_path)
?geom_vege_raster
ggplot() +
geom_vege_raster() +
theme_minimal()
rm(list = ls())
